/**
 * Modern ESLint Configuration - TypeScript Module Edition
 * Hospital Management System
 * 
 * Modern ESLint flat configuration using ES modules with comprehensive
 * TypeScript support, healthcare-specific rules, and enterprise-grade
 * quality standards.
 * 
 * Features:
 * - TypeScript strict validation
 * - Modern JavaScript patterns (Unicorn plugin)
 * - Unused imports cleanup
 * - Healthcare security patterns
 * - Next.js optimization
 * - Jest testing support
 * - Enterprise code quality
 * 
 * @version 2.0.0
 * @author HMS Development Team
 * @compliance Enterprise TypeScript Standards, Healthcare Code Quality
 */

import { dirname } from 'path';
import { fileURLToPath } from 'url';
import { FlatCompat } from '@eslint/eslintrc';
import js from '@eslint/js';
import typescript from '@typescript-eslint/eslint-plugin';
import typescriptParser from '@typescript-eslint/parser';
import type { Linter } from 'eslint';
//import prettier from 'eslint-config-prettier';\nimport jest from 'eslint-plugin-jest';\nimport unicorn from 'eslint-plugin-unicorn';\nimport unusedImports from 'eslint-plugin-unused-imports';\nimport security from 'eslint-plugin-security';\nimport accessibilityPlugin from 'eslint-plugin-jsx-a11y';\nimport reactPlugin from 'eslint-plugin-react';\nimport reactHooksPlugin from 'eslint-plugin-react-hooks';\n\n// ES Module compatibility for __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Flat compatibility for legacy configs\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n  recommendedConfig: js.configs.recommended,\n  allConfig: js.configs.all,\n});\n\n/**\n * Modern ESLint configuration with TypeScript and healthcare standards\n */\nconst eslintConfig: Linter.FlatConfig[] = [\n  // Base JavaScript recommendations\n  js.configs.recommended,\n  \n  // Next.js specific configurations\n  ...compat.extends('next/core-web-vitals', 'next/typescript'),\n  \n  // Main TypeScript and React configuration\n  {\n    name: 'hms-modern-typescript-config',\n    files: ['**/*.{js,jsx,ts,tsx}'],\n    languageOptions: {\n      parser: typescriptParser,\n      parserOptions: {\n        ecmaVersion: 'latest',\n        sourceType: 'module',\n        ecmaFeatures: {\n          jsx: true,\n        },\n        project: './tsconfig.json',\n        tsconfigRootDir: __dirname,\n      },\n      globals: {\n        // Browser globals for healthcare web applications\n        window: 'readonly',\n        document: 'readonly',\n        console: 'readonly',\n        process: 'readonly',\n        Buffer: 'readonly',\n        __dirname: 'readonly',\n        __filename: 'readonly',\n        global: 'readonly',\n        module: 'readonly',\n        require: 'readonly',\n        exports: 'readonly',\n      },\n    },\n    plugins: {\n      '@typescript-eslint': typescript,\n      'unused-imports': unusedImports,\n      unicorn,\n      jest,\n      security,\n      'jsx-a11y': accessibilityPlugin,\n      react: reactPlugin,\n      'react-hooks': reactHooksPlugin,\n    },\n    settings: {\n      react: {\n        version: 'detect',\n      },\n      'import/resolver': {\n        typescript: {\n          project: './tsconfig.json',\n        },\n      },\n    },\n    rules: {\n      // TypeScript strict rules for healthcare applications\n      '@typescript-eslint/no-unused-vars': 'error',\n      '@typescript-eslint/no-explicit-any': 'error',\n      '@typescript-eslint/explicit-function-return-type': 'warn',\n      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n      '@typescript-eslint/no-non-null-assertion': 'error',\n      '@typescript-eslint/prefer-nullish-coalescing': 'error',\n      '@typescript-eslint/prefer-optional-chain': 'error',\n      '@typescript-eslint/no-floating-promises': 'error',\n      '@typescript-eslint/await-thenable': 'error',\n      '@typescript-eslint/no-misused-promises': 'error',\n      '@typescript-eslint/require-await': 'error',\n      '@typescript-eslint/no-unnecessary-type-assertion': 'error',\n      '@typescript-eslint/prefer-as-const': 'error',\n      '@typescript-eslint/ban-ts-comment': 'error',\n      '@typescript-eslint/consistent-type-imports': 'error',\n      '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],\n      '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],\n      '@typescript-eslint/member-ordering': 'error',\n      '@typescript-eslint/method-signature-style': ['error', 'property'],\n      '@typescript-eslint/no-confusing-void-expression': 'error',\n      '@typescript-eslint/no-duplicate-enum-values': 'error',\n      '@typescript-eslint/no-meaningless-void-operator': 'error',\n      '@typescript-eslint/no-mixed-enums': 'error',\n      '@typescript-eslint/no-redundant-type-constituents': 'error',\n      '@typescript-eslint/no-unsafe-declaration-merging': 'error',\n      '@typescript-eslint/no-useless-empty-export': 'error',\n      '@typescript-eslint/prefer-enum-initializers': 'error',\n      '@typescript-eslint/prefer-literal-enum-member': 'error',\n      '@typescript-eslint/prefer-readonly': 'error',\n      '@typescript-eslint/prefer-string-starts-ends-with': 'error',\n      '@typescript-eslint/promise-function-async': 'error',\n      '@typescript-eslint/restrict-plus-operands': 'error',\n      '@typescript-eslint/restrict-template-expressions': 'error',\n      '@typescript-eslint/strict-boolean-expressions': 'error',\n      '@typescript-eslint/switch-exhaustiveness-check': 'error',\n      '@typescript-eslint/no-unsafe-assignment': 'warn',\n      '@typescript-eslint/no-unsafe-call': 'warn',\n      '@typescript-eslint/no-unsafe-member-access': 'warn',\n      '@typescript-eslint/no-unsafe-return': 'warn',\n\n      // React and JSX rules for healthcare UI\n      'react/prop-types': 'off', // TypeScript handles this\n      'react/react-in-jsx-scope': 'off', // Next.js handles this\n      'react/jsx-uses-react': 'off', // Next.js handles this\n      'react/jsx-uses-vars': 'error',\n      'react/jsx-key': 'error',\n      'react/jsx-no-duplicate-props': 'error',\n      'react/jsx-no-undef': 'error',\n      'react/jsx-pascal-case': 'error',\n      'react/no-array-index-key': 'warn',\n      'react/no-children-prop': 'error',\n      'react/no-danger': 'error', // Critical for healthcare security\n      'react/no-danger-with-children': 'error',\n      'react/no-deprecated': 'error',\n      'react/no-direct-mutation-state': 'error',\n      'react/no-find-dom-node': 'error',\n      'react/no-is-mounted': 'error',\n      'react/no-render-return-value': 'error',\n      'react/no-string-refs': 'error',\n      'react/no-unescaped-entities': 'error',\n      'react/no-unknown-property': 'error',\n      'react/no-unsafe': 'error',\n      'react/require-render-return': 'error',\n      'react/self-closing-comp': 'error',\n      'react/style-prop-object': 'error',\n\n      // React Hooks rules (critical for healthcare state management)\n      'react-hooks/rules-of-hooks': 'error',\n      'react-hooks/exhaustive-deps': 'error',\n\n      // Accessibility rules for healthcare applications\n      'jsx-a11y/alt-text': 'error',\n      'jsx-a11y/anchor-has-content': 'error',\n      'jsx-a11y/anchor-is-valid': 'error',\n      'jsx-a11y/aria-activedescendant-has-tabindex': 'error',\n      'jsx-a11y/aria-props': 'error',\n      'jsx-a11y/aria-proptypes': 'error',\n      'jsx-a11y/aria-role': 'error',\n      'jsx-a11y/aria-unsupported-elements': 'error',\n      'jsx-a11y/click-events-have-key-events': 'error',\n      'jsx-a11y/heading-has-content': 'error',\n      'jsx-a11y/html-has-lang': 'error',\n      'jsx-a11y/iframe-has-title': 'error',\n      'jsx-a11y/img-redundant-alt': 'error',\n      'jsx-a11y/interactive-supports-focus': 'error',\n      'jsx-a11y/label-has-associated-control': 'error',\n      'jsx-a11y/media-has-caption': 'error',\n      'jsx-a11y/mouse-events-have-key-events': 'error',\n      'jsx-a11y/no-access-key': 'error',\n      'jsx-a11y/no-autofocus': 'error',\n      'jsx-a11y/no-distracting-elements': 'error',\n      'jsx-a11y/no-interactive-element-to-noninteractive-role': 'error',\n      'jsx-a11y/no-noninteractive-element-interactions': 'error',\n      'jsx-a11y/no-noninteractive-element-to-interactive-role': 'error',\n      'jsx-a11y/no-noninteractive-tabindex': 'error',\n      'jsx-a11y/no-redundant-roles': 'error',\n      'jsx-a11y/no-static-element-interactions': 'error',\n      'jsx-a11y/role-has-required-aria-props': 'error',\n      'jsx-a11y/role-supports-aria-props': 'error',\n      'jsx-a11y/scope': 'error',\n      'jsx-a11y/tabindex-no-positive': 'error',\n\n      // Security rules for healthcare applications\n      'security/detect-buffer-noassert': 'error',\n      'security/detect-child-process': 'error',\n      'security/detect-disable-mustache-escape': 'error',\n      'security/detect-eval-with-expression': 'error',\n      'security/detect-new-buffer': 'error',\n      'security/detect-no-csrf-before-method-override': 'error',\n      'security/detect-non-literal-fs-filename': 'warn',\n      'security/detect-non-literal-regexp': 'error',\n      'security/detect-non-literal-require': 'warn',\n      'security/detect-object-injection': 'warn',\n      'security/detect-possible-timing-attacks': 'warn',\n      'security/detect-pseudoRandomBytes': 'error',\n      'security/detect-unsafe-regex': 'error',\n\n      // Import/Export cleanup rules\n      'unused-imports/no-unused-imports': 'error',\n      'unused-imports/no-unused-vars': [\n        'warn',\n        {\n          vars: 'all',\n          varsIgnorePattern: '^_',\n          args: 'after-used',\n          argsIgnorePattern: '^_',\n          caughtErrorsIgnorePattern: '^_',\n        },\n      ],\n\n      // General code quality rules\n      'prefer-const': 'error',\n      'no-var': 'error',\n      'no-console': ['warn', { allow: ['warn', 'error'] }],\n      'no-debugger': 'error',\n      'no-alert': 'error',\n      'no-eval': 'error',\n      'no-implied-eval': 'error',\n      'no-new-func': 'error',\n      'no-script-url': 'error',\n      'no-return-await': 'error',\n      'require-await': 'error',\n      'prefer-promise-reject-errors': 'error',\n      'no-async-promise-executor': 'error',\n      'no-promise-executor-return': 'error',\n      'prefer-regex-literals': 'error',\n      'no-constructor-return': 'error',\n      'no-duplicate-imports': 'error',\n      'no-self-compare': 'error',\n      'no-template-curly-in-string': 'error',\n      'no-unmodified-loop-condition': 'error',\n      'no-unreachable-loop': 'error',\n      'no-unused-private-class-members': 'error',\n      'require-atomic-updates': 'error',\n\n      // Modern JavaScript patterns (Unicorn plugin)\n      'unicorn/better-regex': 'error',\n      'unicorn/catch-error-name': 'error',\n      'unicorn/consistent-destructuring': 'error',\n      'unicorn/consistent-function-scoping': 'error',\n      'unicorn/custom-error-definition': 'error',\n      'unicorn/empty-brace-spaces': 'error',\n      'unicorn/error-message': 'error',\n      'unicorn/escape-case': 'error',\n      'unicorn/expiring-todo-comments': 'warn',\n      'unicorn/explicit-length-check': 'error',\n      'unicorn/filename-case': ['error', { case: 'kebabCase' }],\n      'unicorn/new-for-builtins': 'error',\n      'unicorn/no-abusive-eslint-disable': 'error',\n      'unicorn/no-array-instanceof': 'error',\n      'unicorn/no-array-push-push': 'error',\n      'unicorn/no-console-spaces': 'error',\n      'unicorn/no-document-cookie': 'error', // Important for healthcare security\n      'unicorn/no-empty-file': 'error',\n      'unicorn/no-for-loop': 'error',\n      'unicorn/no-hex-escape': 'error',\n      'unicorn/no-instanceof-array': 'error',\n      'unicorn/no-invalid-remove-event-listener': 'error',\n      'unicorn/no-lonely-if': 'error',\n      'unicorn/no-nested-ternary': 'error',\n      'unicorn/no-new-array': 'error',\n      'unicorn/no-new-buffer': 'error',\n      'unicorn/no-null': 'off', // Allow null in healthcare data\n      'unicorn/no-object-as-default-parameter': 'error',\n      'unicorn/no-process-exit': 'error',\n      'unicorn/no-static-only-class': 'error',\n      'unicorn/no-thenable': 'error',\n      'unicorn/no-this-assignment': 'error',\n      'unicorn/no-typeof-undefined': 'error',\n      'unicorn/no-unnecessary-await': 'error',\n      'unicorn/no-unreadable-array-destructuring': 'error',\n      'unicorn/no-unsafe-regex': 'error',\n      'unicorn/no-unused-properties': 'error',\n      'unicorn/no-useless-fallback-in-spread': 'error',\n      'unicorn/no-useless-length-check': 'error',\n      'unicorn/no-useless-promise-resolve-reject': 'error',\n      'unicorn/no-useless-spread': 'error',\n      'unicorn/no-useless-switch-case': 'error',\n      'unicorn/no-useless-undefined': 'error',\n      'unicorn/no-zero-fractions': 'error',\n      'unicorn/number-literal-case': 'error',\n      'unicorn/numeric-separators-style': 'error',\n      'unicorn/prefer-add-event-listener': 'error',\n      'unicorn/prefer-array-find': 'error',\n      'unicorn/prefer-array-flat': 'error',\n      'unicorn/prefer-array-flat-map': 'error',\n      'unicorn/prefer-array-index-of': 'error',\n      'unicorn/prefer-array-some': 'error',\n      'unicorn/prefer-at': 'error',\n      'unicorn/prefer-code-point': 'error',\n      'unicorn/prefer-date-now': 'error',\n      'unicorn/prefer-default-parameters': 'error',\n      'unicorn/prefer-dom-node-append': 'error',\n      'unicorn/prefer-dom-node-dataset': 'error',\n      'unicorn/prefer-dom-node-remove': 'error',\n      'unicorn/prefer-dom-node-text-content': 'error',\n      'unicorn/prefer-export-from': 'error',\n      'unicorn/prefer-includes': 'error',\n      'unicorn/prefer-keyboard-event-key': 'error',\n      'unicorn/prefer-logical-operator-over-ternary': 'error',\n      'unicorn/prefer-math-trunc': 'error',\n      'unicorn/prefer-modern-dom-apis': 'error',\n      'unicorn/prefer-modern-math-apis': 'error',\n      'unicorn/prefer-module': 'error',\n      'unicorn/prefer-negative-index': 'error',\n      'unicorn/prefer-node-protocol': 'error',\n      'unicorn/prefer-number-properties': 'error',\n      'unicorn/prefer-object-from-entries': 'error',\n      'unicorn/prefer-optional-catch-binding': 'error',\n      'unicorn/prefer-prototype-methods': 'error',\n      'unicorn/prefer-query-selector': 'error',\n      'unicorn/prefer-reflect-apply': 'error',\n      'unicorn/prefer-regexp-test': 'error',\n      'unicorn/prefer-set-has': 'error',\n      'unicorn/prefer-spread': 'error',\n      'unicorn/prefer-string-replace-all': 'error',\n      'unicorn/prefer-string-slice': 'error',\n      'unicorn/prefer-string-starts-ends-with': 'error',\n      'unicorn/prefer-string-trim-start-end': 'error',\n      'unicorn/prefer-switch': 'error',\n      'unicorn/prefer-ternary': 'error',\n      'unicorn/prefer-top-level-await': 'error',\n      'unicorn/prefer-type-error': 'error',\n      'unicorn/prevent-abbreviations': 'error',\n      'unicorn/require-array-join-separator': 'error',\n      'unicorn/require-number-to-fixed-digits-argument': 'error',\n      'unicorn/require-post-message-target-origin': 'error',\n      'unicorn/string-content': 'error',\n      'unicorn/template-indent': 'error',\n      'unicorn/throw-new-error': 'error',\n\n      // Healthcare-specific restrictions\n      'no-restricted-syntax': [\n        'error',\n        {\n          selector: \"CallExpression[callee.property.name='innerHTML']\",\n          message: 'innerHTML is forbidden for security reasons in healthcare applications.',\n        },\n        {\n          selector: \"CallExpression[callee.property.name='outerHTML']\",\n          message: 'outerHTML is forbidden for security reasons in healthcare applications.',\n        },\n        {\n          selector: \"CallExpression[callee.property.name='dangerouslySetInnerHTML']\",\n          message: 'dangerouslySetInnerHTML is forbidden for security reasons.',\n        },\n      ],\n\n      'no-restricted-globals': [\n        'error',\n        {\n          name: 'localStorage',\n          message: 'Direct localStorage access is forbidden. Use secure storage utilities for PHI data.',\n        },\n        {\n          name: 'sessionStorage',\n          message: 'Direct sessionStorage access is forbidden. Use secure storage utilities for PHI data.',\n        },\n      ],\n    },\n  },\n\n  // Test files configuration\n  {\n    name: 'hms-modern-test-config',\n    files: ['**/*.test.{js,jsx,ts,tsx}', '**/__tests__/**/*.{js,jsx,ts,tsx}'],\n    plugins: {\n      jest,\n    },\n    rules: {\n      // Relaxed rules for test files\n      '@typescript-eslint/no-explicit-any': 'off',\n      '@typescript-eslint/no-non-null-assertion': 'off',\n      '@typescript-eslint/no-unsafe-assignment': 'off',\n      '@typescript-eslint/no-unsafe-call': 'off',\n      '@typescript-eslint/no-unsafe-member-access': 'off',\n      'unicorn/prevent-abbreviations': 'off',\n      'unicorn/no-null': 'off',\n      'security/detect-object-injection': 'off',\n      'no-console': 'off',\n\n      // Jest-specific rules\n      'jest/expect-expect': 'error',\n      'jest/no-disabled-tests': 'warn',\n      'jest/no-focused-tests': 'error',\n      'jest/no-identical-title': 'error',\n      'jest/prefer-to-have-length': 'warn',\n      'jest/valid-expect': 'error',\n      'jest/consistent-test-it': ['error', { fn: 'test', withinDescribe: 'test' }],\n    },\n  },\n\n  // Node.js scripts configuration\n  {\n    name: 'hms-modern-node-config',\n    files: [\n      'scripts/**/*.{js,ts}',\n      '*.config.{js,ts,mjs,mts}',\n      'src/app/api/**/*.{js,ts}',\n    ],\n    languageOptions: {\n      globals: {\n        process: 'readonly',\n        Buffer: 'readonly',\n        __dirname: 'readonly',\n        __filename: 'readonly',\n        module: 'readonly',\n        require: 'readonly',\n        exports: 'readonly',\n        console: 'readonly',\n      },\n    },\n    rules: {\n      // Node.js specific adjustments\n      'no-console': 'off',\n      'unicorn/prefer-module': 'off',\n      'unicorn/prefer-top-level-await': 'off',\n      '@typescript-eslint/no-var-requires': 'off',\n    },\n  },\n\n  // Prettier integration (must be last)\n  prettier,\n];\n\nexport default eslintConfig;\n\n/**\n * Modern ESLint Configuration Features:\n * \n * 1. TypeScript Integration:\n *    - Strict type checking\n *    - Type-aware linting\n *    - Consistent type definitions\n *    - Modern TypeScript patterns\n * \n * 2. Healthcare Security:\n *    - PHI data protection\n *    - XSS prevention\n *    - Secure coding patterns\n *    - Access control validation\n * \n * 3. Modern JavaScript:\n *    - ES2022+ features\n *    - Modern API usage\n *    - Performance optimizations\n *    - Best practice enforcement\n * \n * 4. React & Accessibility:\n *    - React 18+ patterns\n *    - WCAG compliance\n *    - Healthcare UI standards\n *    - Component best practices\n * \n * 5. Code Quality:\n *    - Complexity management\n *    - Performance optimization\n *    - Maintainability standards\n *    - Error prevention\n * \n * 6. Testing Support:\n *    - Jest integration\n *    - Testing best practices\n *    - Coverage validation\n *    - Mock management\n */\n"
