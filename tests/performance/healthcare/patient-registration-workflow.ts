/**\n * Patient Registration Workflow Performance Test - Enterprise TypeScript Version\n * Hospital Management System\n * \n * Comprehensive performance testing for patient registration workflows with\n * healthcare compliance validation, real-time monitoring, and advanced analytics.\n * \n * Test Coverage:\n * - Complete patient registration lifecycle\n * - HIPAA compliance validation\n * - Insurance verification workflows\n * - Duplicate patient detection\n * - Audit trail generation\n * - Patient portal setup\n * - Welcome packet generation\n * - Appointment scheduling integration\n * - Real-time performance monitoring\n * - Healthcare metrics analysis\n * \n * Compliance Standards:\n * - HIPAA Privacy and Security Rules\n * - HL7 FHIR R4 Patient Resource\n * - CMS Interoperability Standards\n * - Joint Commission Requirements\n * \n * @version 2.0.0\n * @author HMS Development Team\n * @compliance HIPAA, HL7 FHIR R4, CMS Interoperability\n */\n\nimport http, { RefinedResponse, ResponseType } from 'k6/http';\nimport { check, sleep, group, fail } from 'k6';\nimport { Rate, Trend, Counter, Gauge } from 'k6/metrics';\nimport { randomItem, randomIntBetween, randomString } from 'https://jslib.k6.io/k6-utils/1.4.0/index.js';\nimport { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.4.0/index.js';\nimport { textSummary } from 'https://jslib.k6.io/k6-summary/0.0.1/index.js';\n\n// Enterprise healthcare metrics\nconst registrationSuccessRate = new Rate('registration_success_rate');\nconst registrationDuration = new Trend('registration_duration');\nconst hipaaValidationTime = new Trend('hipaa_validation_time');\nconst insuranceVerificationTime = new Trend('insurance_verification_time');\nconst duplicateCheckTime = new Trend('duplicate_check_time');\nconst patientPortalSetupTime = new Trend('patient_portal_setup_time');\nconst welcomePacketGenerationTime = new Trend('welcome_packet_generation_time');\nconst auditLogCreation = new Counter('audit_log_entries');\nconst hipaaComplianceChecks = new Counter('hipaa_compliance_checks');\nconst dataEncryptionValidations = new Counter('data_encryption_validations');\nconst patientConsentValidations = new Counter('patient_consent_validations');\nconst registrationErrors = new Counter('registration_errors');\nconst concurrentRegistrations = new Gauge('concurrent_registrations');\nconst systemResourceUtilization = new Gauge('system_resource_utilization');\nconst dataPrivacyScore = new Gauge('data_privacy_score');\n\n// Type definitions for healthcare domain objects\ninterface PatientData {\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly middleName?: string;\n  readonly dateOfBirth: string;\n  readonly ssn: string;\n  readonly mrn?: string;\n  readonly gender: 'M' | 'F' | 'O' | 'U';\n  readonly race?: string;\n  readonly ethnicity?: string;\n  readonly preferredLanguage: string;\n  readonly phoneNumber: string;\n  readonly email: string;\n  readonly address: Address;\n  readonly emergencyContact: EmergencyContact;\n  readonly insuranceInfo: InsuranceInfo;\n  readonly medicalHistory: MedicalHistory;\n  readonly consentForms: ConsentForm[];\n  readonly maritalStatus: MaritalStatus;\n  readonly occupation?: string;\n  readonly pharmacyPreference?: PharmacyInfo;\n  readonly communicationPreferences: CommunicationPreferences;\n}\n\ninterface Address {\n  readonly street: string;\n  readonly street2?: string;\n  readonly city: string;\n  readonly state: string;\n  readonly zipCode: string;\n  readonly country: string;\n  readonly type: 'home' | 'work' | 'temporary';\n}\n\ninterface EmergencyContact {\n  readonly name: string;\n  readonly relationship: string;\n  readonly phoneNumber: string;\n  readonly email?: string;\n  readonly address?: Address;\n  readonly isPrimaryContact: boolean;\n}\n\ninterface InsuranceInfo {\n  readonly primaryInsurance: InsuranceDetails;\n  readonly secondaryInsurance?: InsuranceDetails;\n  readonly selfPay: boolean;\n}\n\ninterface InsuranceDetails {\n  readonly provider: string;\n  readonly planName: string;\n  readonly policyNumber: string;\n  readonly groupNumber?: string;\n  readonly subscriberId: string;\n  readonly subscriberName: string;\n  readonly subscriberRelationship: string;\n  readonly effectiveDate: string;\n  readonly expirationDate?: string;\n  readonly copayAmount?: number;\n  readonly deductibleAmount?: number;\n}\n\ninterface MedicalHistory {\n  readonly conditions: MedicalCondition[];\n  readonly allergies: Allergy[];\n  readonly medications: Medication[];\n  readonly familyHistory: FamilyHistory;\n  readonly socialHistory: SocialHistory;\n  readonly surgicalHistory: Surgery[];\n  readonly immunizations: Immunization[];\n}\n\ninterface MedicalCondition {\n  readonly name: string;\n  readonly icd10Code?: string;\n  readonly diagnosisDate?: string;\n  readonly severity: 'mild' | 'moderate' | 'severe';\n  readonly status: 'active' | 'resolved' | 'chronic';\n  readonly notes?: string;\n}\n\ninterface Allergy {\n  readonly allergen: string;\n  readonly reaction: string;\n  readonly severity: 'mild' | 'moderate' | 'severe' | 'life-threatening';\n  readonly onsetDate?: string;\n  readonly notes?: string;\n}\n\ninterface Medication {\n  readonly name: string;\n  readonly dosage: string;\n  readonly frequency: string;\n  readonly route: string;\n  readonly prescribingPhysician?: string;\n  readonly startDate?: string;\n  readonly endDate?: string;\n  readonly reason?: string;\n}\n\ninterface FamilyHistory {\n  readonly motherSide: FamilyCondition[];\n  readonly fatherSide: FamilyCondition[];\n  readonly siblings: FamilyCondition[];\n}\n\ninterface FamilyCondition {\n  readonly condition: string;\n  readonly relationship: string;\n  readonly ageOfOnset?: number;\n  readonly notes?: string;\n}\n\ninterface SocialHistory {\n  readonly smokingStatus: 'never' | 'former' | 'current';\n  readonly alcoholUse: 'none' | 'occasional' | 'moderate' | 'heavy';\n  readonly drugUse: 'none' | 'former' | 'current';\n  readonly exerciseFrequency: 'none' | 'occasional' | 'regular' | 'daily';\n  readonly diet: 'regular' | 'vegetarian' | 'vegan' | 'diabetic' | 'low-sodium';\n  readonly occupation?: string;\n  readonly education?: string;\n  readonly livingArrangement?: string;\n}\n\ninterface Surgery {\n  readonly procedure: string;\n  readonly date: string;\n  readonly surgeon?: string;\n  readonly facility?: string;\n  readonly complications?: string;\n  readonly notes?: string;\n}\n\ninterface Immunization {\n  readonly vaccine: string;\n  readonly dateAdministered: string;\n  readonly lotNumber?: string;\n  readonly administeredBy?: string;\n  readonly reactionNotes?: string;\n}\n\ninterface ConsentForm {\n  readonly type: ConsentType;\n  readonly status: 'signed' | 'pending' | 'declined';\n  readonly signedDate?: string;\n  readonly witnessName?: string;\n  readonly notes?: string;\n}\n\ntype ConsentType = \n  | 'treatment_consent' | 'hipaa_authorization' | 'financial_responsibility'\n  | 'research_participation' | 'photography_consent' | 'emergency_treatment';\n\ntype MaritalStatus = 'single' | 'married' | 'divorced' | 'widowed' | 'separated' | 'domestic_partner';\n\ninterface PharmacyInfo {\n  readonly name: string;\n  readonly address: Address;\n  readonly phoneNumber: string;\n  readonly ncpdpId?: string;\n}\n\ninterface CommunicationPreferences {\n  readonly preferredMethod: 'phone' | 'email' | 'sms' | 'mail' | 'portal';\n  readonly appointmentReminders: boolean;\n  readonly labResultNotifications: boolean;\n  readonly billStatements: boolean;\n  readonly healthEducationMaterials: boolean;\n  readonly marketingCommunications: boolean;\n  readonly emergencyNotifications: boolean;\n}\n\ninterface RegistrationResponse {\n  readonly success: boolean;\n  readonly patientId: string;\n  readonly mrn: string;\n  readonly registrationId: string;\n  readonly auditTrailId: string;\n  readonly hipaaAuditLog: boolean;\n  readonly consentStatus: ConsentStatus;\n  readonly insuranceVerificationStatus: InsuranceVerificationStatus;\n  readonly portalCredentials?: PortalCredentials;\n  readonly appointmentSuggestions?: AppointmentSuggestion[];\n  readonly timestamp: string;\n}\n\ninterface ConsentStatus {\n  readonly allRequiredConsentsObtained: boolean;\n  readonly consentDetails: Record<ConsentType,\n  readonly missingConsents: ConsentType[];\n}\n\ninterface InsuranceVerificationStatus {\n  readonly primaryVerified: boolean;\n  readonly secondaryVerified?: boolean;\n  readonly verificationDetails: VerificationDetails;\n  readonly estimatedCoverage?: CoverageEstimate;\n}\n\ninterface VerificationDetails {\n  readonly eligibilityConfirmed: boolean;\n  readonly benefitsActive: boolean;\n  readonly copayAmount?: number;\n  readonly deductibleRemaining?: number;\n  readonly priorAuthRequired: boolean;\n  readonly verificationDate: string;\n  readonly verificationSource: string;\n}\n\ninterface CoverageEstimate {\n  readonly officeCoverage: number;\n  readonly specialtyCoverage: number;\n  readonly emergencyCoverage: number;\n  readonly labCoverage: number;\n  readonly imagingCoverage: number;\n}\n\ninterface PortalCredentials {\n  readonly username: string;\n  readonly temporaryPassword: string;\n  readonly activationCode: string;\n  readonly expirationDate: string;\n  readonly setupInstructions: string;\n}\n\ninterface AppointmentSuggestion {\n  readonly appointmentType: string;\n  readonly recommendedTimeframe: string;\n  readonly department: string;\n  readonly priority: 'routine' | 'urgent' | 'stat';\n  readonly reason: string;\n}\n\ninterface APIResponse<T> {\n  readonly success: boolean;\n  readonly data?: T;\n  readonly error?: string;\n  readonly message?: string;\n  readonly timestamp: string;\n  readonly requestId: string;\n  readonly processingTime: number;\n  readonly complianceFlags?: ComplianceFlags;\n}\n\ninterface ComplianceFlags {\n  readonly hipaaCompliant: boolean;\n  readonly dataEncrypted: boolean;\n  readonly auditTrailComplete: boolean;\n  readonly consentVerified: boolean;\n  readonly accessControlsVerified: boolean;\n}\n\ninterface TestConfiguration {\n  readonly baseUrl: string;\n  readonly apiVersion: string;\n  readonly testEnvironment: 'development' | 'staging' | 'production';\n  readonly performanceThresholds: PerformanceThresholds;\n  readonly complianceRequirements: ComplianceRequirements;\n  readonly monitoringConfig: MonitoringConfig;\n}\n\ninterface PerformanceThresholds {\n  readonly maxRegistrationTime: number;\n  readonly maxHipaaValidationTime: number;\n  readonly maxInsuranceVerificationTime: number;\n  readonly maxDuplicateCheckTime: number;\n  readonly minSuccessRate: number;\n  readonly maxErrorRate: number;\n  readonly maxConcurrentUsers: number;\n}\n\ninterface ComplianceRequirements {\n  readonly hipaaRequired: boolean;\n  readonly auditTrailRequired: boolean;\n  readonly dataEncryptionRequired: boolean;\n  readonly consentValidationRequired: boolean;\n  readonly accessLogRequired: boolean;\n}\n\ninterface MonitoringConfig {\n  readonly enableRealTimeMetrics: boolean;\n  readonly alertingEnabled: boolean;\n  readonly metricsPushEndpoint?: string;\n  readonly alertWebhook?: string;\n}\n\n// Enterprise test configuration\nexport const _options = {\n  scenarios: {\n    // Morning registration rush (8 AM - 11 AM)\n    morning_rush: {\n      executor: 'ramping-vus',\n      startVUs: 5,\n      stages: [\n        { duration: '2m', target: 15 ,},    // Early arrivals\n        { duration: '8m', target: 40 ,},    // Peak morning registration\n        { duration: '5m', target: 30 ,},    // Late morning stabilization\n        { duration: '2m', target: 10 ,},    // End of morning rush\n        { duration: '1m', target: 0 ,},     // Cleanup\n      ],\n      gracefulRampDown: '30s',\n      tags: { _scenario: 'morning_rush' ,},\n    },\n\n    // Afternoon registration (1 PM - 5 PM)\n    afternoon_registration: {\n      executor: 'constant-vus',\n      vus: 20,\n      duration: '15m',\n      tags: { _scenario: 'afternoon_registration' ,},\n    },\n\n    // Emergency registration (24/7)\n    emergency_registration: {\n      executor: 'ramping-arrival-rate',\n      startRate: 2,\n      timeUnit: '1m',\n      preAllocatedVUs: 10,\n      maxVUs: 50,\n      stages: [\n        { duration: '5m', target: 5 ,},     // Regular emergency rate\n        { duration: '3m', target: 15 ,},    // Emergency surge\n        { duration: '5m', target: 8 ,},     // Return to normal\n        { duration: '2m', target: 2 ,},     // Low activity\n      ],\n      tags: { _scenario: 'emergency_registration' ,},\n    },\n\n    // Weekend registration (reduced capacity)\n    weekend_registration: {\n      executor: 'constant-vus',\n      vus: 8,\n      duration: '10m',\n      tags: { _scenario: 'weekend_registration' ,},\n    },\n\n    // System stress test\n    stress_test: {\n      executor: 'ramping-vus',\n      startVUs: 10,\n      stages: [\n        { duration: '3m', target: 50 ,},    // Ramp up to normal capacity\n        { duration: '5m', target: 100 ,},   // High load\n        { duration: '3m', target: 150 ,},   // Stress level\n        { duration: '2m', target: 200 ,},   // Breaking point\n        { duration: '2m', target: 50 ,},    // Recovery\n        { duration: '1m', target: 0 ,},     // Cleanup\n      ],\n      tags: { _scenario: 'stress_test' ,},\n    },\n  },\n\n  // Healthcare-specific performance thresholds\n  thresholds: {\n    // Overall system performance\n    'http_req_duration': ['p(95)<3000', 'p(99)<5000'],\n    'http_req_failed': ['rate<0.005'],  // 0.5% error rate\n    \n    // Registration workflow performance\n    'registration_duration': ['p(95)<15000', 'p(99)<25000'],      // Complete workflow\n    'registration_success_rate': ['rate>0.995'],                   // 99.5% success rate\n    \n    // Healthcare compliance performance\n    'hipaa_validation_time': ['p(95)<1000', 'p(99)<2000'],        // HIPAA checks\n    'insurance_verification_time': ['p(95)<5000', 'p(99)<8000'],  // Insurance verification\n    'duplicate_check_time': ['p(95)<800', 'p(99)<1500'],          // Duplicate detection\n    'patient_portal_setup_time': ['p(95)<3000', 'p(99)<5000'],    // Portal setup\n    'welcome_packet_generation_time': ['p(95)<2000', 'p(99)<3000'], // Welcome packet\n    \n    // API endpoint specific thresholds\n    'http_req_duration{name:patient_registration,}': ['p(99)<8000'],\n    'http_req_duration{name:hipaa_validation,}': ['p(95)<1000'],\n    'http_req_duration{name:insurance_verification,}': ['p(95)<5000'],\n    'http_req_duration{name:duplicate_check,}': ['p(95)<800'],\n    \n    // Scenario-specific thresholds\n    'http_req_duration{_scenario:emergency_registration,}': ['p(95)<2000'],\n    'http_req_failed{_scenario:emergency_registration,}': ['rate<0.001'],\n    \n    // Resource utilization\n    'concurrent_registrations': ['value<200'],\n    'system_resource_utilization': ['value<80'], // 80% utilization limit\n    'data_privacy_score': ['value>95'],          // Privacy compliance score\n  },\n\n  summaryTrendStats: ['min', 'med', 'avg', 'p(90)', 'p(95)', 'p(99)', 'p(99.9)', 'max', 'count'],\n  summaryTimeUnit: 'ms',\n  \n  // Extended timeouts for healthcare operations\n  setupTimeout: '60s',\n  teardownTimeout: '60s',\n  httpDebug: 'failed',\n  \n  // External monitoring integration\n  ext: {\n    influxdb: {\n      enabled: true,\n      addr: 'http://localhost:8086',\n      db: 'k6_patient_registration',\n      insecureSkipTLSVerify: true,\n    },\n  },\n};\n\n// Configuration with environment support\nconst CONFIG: TestConfiguration = {\n  baseUrl: __ENV.HMS_BASE_URL || 'http://localhost:3000',\n  apiVersion: 'v1',\n  testEnvironment: (__ENV.TEST_ENVIRONMENT as any) || 'staging',\n  performanceThresholds: {\n    maxRegistrationTime: 15000,     // 15 seconds\n    maxHipaaValidationTime: 1000,   // 1 second\n    maxInsuranceVerificationTime: 5000, // 5 seconds\n    maxDuplicateCheckTime: 800,     // 800ms\n    minSuccessRate: 0.995,          // 99.5%\n    maxErrorRate: 0.005,            // 0.5%\n    maxConcurrentUsers: 200,        // 200 concurrent users\n  },\n  complianceRequirements: {\n    hipaaRequired: true,\n    auditTrailRequired: true,\n    dataEncryptionRequired: true,\n    consentValidationRequired: true,\n    accessLogRequired: true,\n  },\n  monitoringConfig: {\n    enableRealTimeMetrics: true,\n    alertingEnabled: true,\n    metricsPushEndpoint: __ENV.METRICS_ENDPOINT,\n    alertWebhook: __ENV.ALERT_WEBHOOK,\n  },\n};\n\n// Enterprise healthcare data generator\nclass EnterpriseHealthcareDataGenerator {\n  private static readonly FIRST_NAMES = [\n    'James', 'Mary', 'John', 'Patricia', 'Robert', 'Jennifer', 'Michael', 'Linda',\n    'William', 'Elizabeth', 'David', 'Barbara', 'Richard', 'Susan', 'Joseph', 'Jessica',\n    'Thomas', 'Sarah', 'Christopher', 'Karen', 'Charles', 'Nancy', 'Daniel', 'Lisa',\n    'Matthew', 'Betty', 'Anthony', 'Helen', 'Mark', 'Sandra', 'Donald', 'Donna'\n  ];\n\n  private static readonly LAST_NAMES = [\n    'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis',\n    'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson',\n    'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson',\n    'White', 'Harris', 'Sanchez', 'Clark', 'Ramirez', 'Lewis', 'Robinson', 'Walker'\n  ];\n\n  private static readonly INSURANCE_PROVIDERS = [\n    'Blue Cross Blue Shield', 'Aetna', 'Humana', 'Cigna', 'United Healthcare',\n    'Kaiser Permanente', 'Anthem', 'Molina Healthcare', 'Centene', 'WellCare'\n  ];\n\n  private static readonly MEDICAL_CONDITIONS = [\n    { name: 'Hypertension', icd10: 'I10', severity: 'moderate' as const ,},\n    { name: 'Type 2 Diabetes Mellitus', icd10: 'E11.9', severity: 'moderate' as const ,},\n    { name: 'Hyperlipidemia', icd10: 'E78.5', severity: 'mild' as const ,},\n    { name: 'Asthma', icd10: 'J45.9', severity: 'mild' as const ,},\n    { name: 'Osteoarthritis', icd10: 'M19.90', severity: 'moderate' as const ,},\n    { name: 'Depression', icd10: 'F32.9', severity: 'moderate' as const ,},\n    { name: 'Anxiety Disorder', icd10: 'F41.9', severity: 'mild' as const ,},\n  ];\n\n  private static readonly COMMON_ALLERGIES = [\n    { allergen: 'Penicillin', reaction: 'Rash', severity: 'moderate' as const ,},\n    { allergen: 'Shellfish', reaction: 'Anaphylaxis', severity: 'life-threatening' as const ,},\n    { allergen: 'Peanuts', reaction: 'Hives', severity: 'moderate' as const ,},\n    { allergen: 'Latex', reaction: 'Contact dermatitis', severity: 'mild' as const ,},\n    { allergen: 'Sulfa drugs', reaction: 'Rash', severity: 'moderate' as const ,},\n    { allergen: 'Iodine', reaction: 'Swelling', severity: 'moderate' as const ,},\n  ];\n\n  static generateComprehensivePatientData(): PatientData {\n    const firstName = randomItem(this.FIRST_NAMES);\n    const lastName = randomItem(this.LAST_NAMES);\n    \n    return {\n      firstName,\n      lastName,\n      middleName: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.7 ? randomItem(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K']) : undefined,\n      dateOfBirth: this.generateRealisticDateOfBirth(),\n      ssn: this.generateSSN(),\n      gender: randomItem(['M', 'F', 'O', 'U']),\n      race: randomItem(['White', 'Black or African American', 'Asian', 'Hispanic or Latino', 'Other', 'Prefer not to answer']),\n      ethnicity: randomItem(['Hispanic or Latino', 'Not Hispanic or Latino', 'Prefer not to answer']),\n      preferredLanguage: randomItem(['English', 'Spanish', 'French', 'Chinese', 'Portuguese', 'Russian']),\n      phoneNumber: this.generatePhoneNumber(),\n      email: this.generateEmail(firstName, lastName),\n      address: this.generateAddress(),\n      emergencyContact: this.generateEmergencyContact(),\n      insuranceInfo: this.generateInsuranceInfo(),\n      medicalHistory: this.generateMedicalHistory(),\n      consentForms: this.generateConsentForms(),\n      maritalStatus: randomItem(['single', 'married', 'divorced', 'widowed', 'separated']),\n      occupation: this.generateOccupation(),\n      pharmacyPreference: this.generatePharmacyInfo(),\n      communicationPreferences: this.generateCommunicationPreferences(),\n  }\n\n  private static generateRealisticDateOfBirth(): string {\n    // Generate ages between 0 and 100 with realistic distribution\n    const ageWeights = {\n      infant: 0.05,    // 0-2 years\n      child: 0.15,     // 3-17 years\n      adult: 0.65,     // 18-64 years\n      senior: 0.15     // 65+ years\n    ,\n    \n    const random = crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1);\n    let age: number;\n    \n    if (random < ageWeights.infant) {\n      age = randomIntBetween(0, 2);\n    } else if (random < ageWeights.infant + ageWeights.child) {\n      age = randomIntBetween(3, 17);\n    } else if (random < ageWeights.infant + ageWeights.child + ageWeights.adult) {\n      age = randomIntBetween(18, 64);\n    } else {\n      age = randomIntBetween(65, 100);\n    }\n    \n    const birthDate = new Date();\n    birthDate.setFullYear(birthDate.getFullYear() - age);\n    birthDate.setMonth(randomIntBetween(0, 11));\n    birthDate.setDate(randomIntBetween(1, 28));\n    \n    return birthDate.toISOString().split('T')[0];\n  }\n\n  private static generateSSN(): string {\n    // Generate realistic but fake SSN format\n    const area = randomIntBetween(100, 999);\n    const group = randomIntBetween(10, 99);\n    const serial = randomIntBetween(1000, 9999);\n    return `${area}-${group}-${serial}`;\n  }\n\n  private static generatePhoneNumber(): string {\n    const areaCode = randomIntBetween(200, 999);\n    const exchange = randomIntBetween(200, 999);\n    const number = randomIntBetween(1000, 9999);\n    return `+1-${areaCode}-${exchange}-${number}`;\n  }\n\n  private static generateEmail(firstName: string, lastName: string): string {\n    const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'icloud.com'];\n    const _randomNum = randomIntBetween(1, 999);\n    const username = `${firstName.toLowerCase()}./* SECURITY: Template literal eliminated */\n    return `${username}@${randomItem(domains),\n  }\n\n  private static generateAddress(): Address {\n    const _streets = [\n      'Main St', 'Oak Ave', 'Park Rd', 'First St', 'Second Ave', 'Elm St',\n      'Maple Ave', 'Cedar Rd', 'Pine St', 'Washington Ave', 'Lincoln Blvd'\n    ];\n    const cities = [\n      'Springfield', 'Franklin', 'Georgetown', 'Madison', 'Riverside',\n      'Fairview', 'Arlington', 'Clayton', 'Bristol', 'Salem'\n    ];\n    const states = [\n      'CA', 'NY', 'TX', 'FL', 'IL', 'PA', 'OH', 'GA', 'NC', 'MI',\n      'NJ', 'VA', 'WA', 'AZ', 'MA', 'TN', 'IN', 'MO', 'MD', 'WI'\n    ];\n    \n    return {\n      street: `/* SECURITY: Template literal eliminated */\n      street2: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.8 ? `Apt $}` : undefined,\n      city: randomItem(cities),\n      state: randomItem(states),\n      zipCode: `${randomIntBetween(10000, 99999)}`,\n      country: 'USA',\n      type: 'home'\n    ,\n  }\n\n  private static generateEmergencyContact(): EmergencyContact {\n    const relationships = ['Spouse', 'Parent', 'Sibling', 'Child', 'Friend', 'Partner'];\n    \n    return {\n      name: `/* SECURITY: Template literal eliminated */\n      relationship: randomItem(relationships),\n      phoneNumber: this.generatePhoneNumber(),\n      email: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.3 ? this.generateEmail('emergency', 'contact') : undefined,\n      isPrimaryContact: true\n    ,\n  }\n\n  private static generateInsuranceInfo(): InsuranceInfo {\n    const provider = randomItem(this.INSURANCE_PROVIDERS);\n    const planNames = ['PPO', 'HMO', 'EPO', 'HDHP', 'Standard', 'Premium', 'Basic'];\n    \n    const primaryInsurance: InsuranceDetails = {\n      provider,\n      planName: `/* SECURITY: Template literal eliminated */\n      policyNumber: `POL${randomString(8, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')}`,\n      groupNumber: `GRP${randomString(6, '0123456789')}`,\n      subscriberId: `SUB${randomString(10, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')}`,\n      subscriberName: `/* SECURITY: Template literal eliminated */\n      subscriberRelationship: randomItem(['Self', 'Spouse', 'Parent', 'Child']),\n      effectiveDate: this.getPastDate(randomIntBetween(30, 365)),\n      expirationDate: this.getFutureDate(randomIntBetween(30, 365)),\n      copayAmount: randomIntBetween(10, 50),\n      deductibleAmount: randomIntBetween(500,\n    \n    return {\n      primaryInsurance,\n      secondaryInsurance: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.8 ? {\n        ...primaryInsurance,\n        provider: randomItem(this.INSURANCE_PROVIDERS.filter(p => p !== provider)),\n        planName: `Secondary $}`\n      ,} : undefined,\n      selfPay: false\n    ,\n  }\n\n  private static generateMedicalHistory(): MedicalHistory {\n    const numConditions = crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.7 ? randomIntBetween(1, 3) : 0;\n    const numAllergies = crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.6 ? randomIntBetween(1, 2) : 0;\n    const numMedications = crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.5 ? randomIntBetween(1, 4) : 0;\n    \n    return {\n      conditions: Array.from(},\n        return {\n          name: condition.name,\n          icd10Code: condition.icd10,\n          diagnosisDate: this.getPastDate(randomIntBetween(30, 2000)),\n          severity: condition.severity,\n          status: randomItem(['active', 'resolved', 'chronic']),\n          notes: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.7 ? 'Well controlled with medication' : undefined\n        ,\n      }),\n      allergies: Array.from({ length: numAllergies ,}, () => {\n        const allergy = randomItem(this.COMMON_ALLERGIES);\n        return {\n          allergen: allergy.allergen,\n          reaction: allergy.reaction,\n          severity: allergy.severity,\n          onsetDate: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.5 ? this.getPastDate(randomIntBetween(100, 5000)) : undefined,\n          notes: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.8 ? 'Confirmed by allergist' : undefined\n        ,\n      }),\n      medications: Array.from({ length: numMedications ,}, () => {\n        const medications = ['Lisinopril', 'Metformin', 'Atorvastatin', 'Levothyroxine', 'Amlodipine', 'Albuterol'];\n        const dosages = ['5mg', '10mg', '20mg', '25mg', '50mg', '100mg'];\n        const frequencies = ['Once daily', 'Twice daily', 'Three times daily', 'As needed'];\n        \n        return {\n          name: randomItem(medications),\n          dosage: randomItem(dosages),\n          frequency: randomItem(frequencies),\n          route: randomItem(['Oral', 'Topical', 'Inhaled', 'Injection']),\n          prescribingPhysician: `Dr. $}`,\n          startDate: this.getPastDate(randomIntBetween(30, 1000)),\n          reason: 'Chronic condition management'\n        ,\n      }),\n      familyHistory: this.generateFamilyHistory(),\n      socialHistory: this.generateSocialHistory(),\n      surgicalHistory: this.generateSurgicalHistory(),\n      immunizations: this.generateImmunizations()\n    ,\n  }\n\n  private static generateFamilyHistory(): FamilyHistory {\n    const conditions = ['Heart Disease', 'Cancer', 'Diabetes', 'Hypertension', 'Stroke', 'Alzheimer\\'s Disease'];\n    \n    return {\n      motherSide: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.5 ? [}] : [],\n      fatherSide: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.5 ? [{\n        condition: randomItem(conditions),\n        relationship: 'Father',\n        ageOfOnset: randomIntBetween(45, 85),\n        notes: undefined\n      ,}] : [],\n      siblings: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.3 ? [{\n        condition: randomItem(conditions),\n        relationship: 'Sibling',\n        ageOfOnset: randomIntBetween(30, 70),\n        notes: undefined\n      }] : []\n    ,\n  }\n\n  private static generateSocialHistory(): SocialHistory {\n    return {\n      smokingStatus: randomItem(['never', 'former', 'current']),\n      alcoholUse: randomItem(['none', 'occasional', 'moderate', 'heavy']),\n      drugUse: randomItem(['none', 'former', 'current']),\n      exerciseFrequency: randomItem(['none', 'occasional', 'regular', 'daily']),\n      diet: randomItem(['regular', 'vegetarian', 'vegan', 'diabetic', 'low-sodium']),\n      occupation: this.generateOccupation(),\n      education: randomItem(['High School', 'Some College', 'Bachelor\\'s Degree', 'Master\\'s Degree', 'Doctorate']),\n      livingArrangement: randomItem(['Alone', 'With Family', 'With Spouse', 'Assisted Living', 'Nursing Home'])\n    };\n  }\n\n  private static generateSurgicalHistory(): Surgery[] {\n    if (crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.7) return [];\n    \n    const procedures = [\n      'Appendectomy', 'Cholecystectomy', 'Knee Replacement', 'Hip Replacement',\n      'Cataract Surgery', 'Hernia Repair', 'Coronary Bypass', 'Tonsillectomy'\n    ];\n    \n    return [{\n      procedure: randomItem(procedures),\n      date: this.getPastDate(randomIntBetween(365, 7300)), // 1-20 years ago\n      surgeon: `Dr. ${randomItem(this.LAST_NAMES),}`,\n      facility: 'Memorial Hospital',\n      complications: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.9 ? 'Minor bleeding' : undefined,\n      notes: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.8 ? 'Procedure completed successfully' : undefined\n    ,\n  }\n\n  private static generateImmunizations(): Immunization[] {\n    const vaccines = [\n      'COVID-19', 'Influenza', 'Pneumococcal', 'Tdap', 'MMR', 'Hepatitis B',\n      'Varicella', 'Meningococcal', 'HPV', 'Zoster'\n    ];\n    \n    const numVaccines = randomIntBetween(2, 6);\n    return Array.from({ length: numVaccines ,}, () => ({\n      vaccine: randomItem(vaccines),\n      dateAdministered: this.getPastDate(randomIntBetween(30, 1825)), // Within 5 years\n      lotNumber: `LOT${randomString(8, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')}`,\n      administeredBy: 'Pharmacy',\n      reactionNotes: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.95 ? 'Mild soreness at injection site' : undefined\n    ,\n  }\n\n  private static generateConsentForms(): ConsentForm[] {\n    const consentTypes: ConsentType[] = [\n      'treatment_consent', 'hipaa_authorization', 'financial_responsibility',\n      'research_participation', 'photography_consent', 'emergency_treatment'\n    ];\n    \n    return consentTypes.map(type => ({\n      type,\n      status: randomItem(['signed', 'pending']) as 'signed' | 'pending',\n      signedDate: type === 'treatment_consent' || type === 'hipaa_authorization' || type === 'financial_responsibility' \n        ? new Date().toISOString() \n        : undefined,\n      witnessName: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.5 ? 'Witness Name' : undefined,\n      notes: undefined\n    ,\n  }\n\n  private static generateOccupation(): string {\n    const occupations = [\n      'Teacher', 'Engineer', 'Nurse', 'Manager', 'Retired', 'Student',\n      'Accountant', 'Sales Representative', 'Construction Worker', 'Chef',\n      'Police Officer', 'Firefighter', 'Attorney', 'Social Worker', 'Pharmacist'\n    ];\n    return randomItem(occupations);\n  }\n\n  private static generatePharmacyInfo(): PharmacyInfo {\n    const pharmacies = [\n      'CVS Pharmacy', 'Walgreens', 'Rite Aid', 'Kroger Pharmacy',\n      'Target Pharmacy', 'Walmart Pharmacy', 'Costco Pharmacy'\n    ];\n    \n    return {\n      name: randomItem(pharmacies),\n      address: this.generateAddress(),\n      phoneNumber: this.generatePhoneNumber(),\n  }\n\n  private static generateCommunicationPreferences(): CommunicationPreferences {\n    return {\n      preferredMethod: randomItem(['phone', 'email', 'sms', 'portal']),\n      appointmentReminders: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.2,\n      labResultNotifications: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.3,\n      billStatements: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.1,\n      healthEducationMaterials: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.6,\n      marketingCommunications: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.8,\n      emergencyNotifications: crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) > 0.05\n    ,\n  }\n\n  private static getPastDate(daysAgo: number): string {\n    const date = new Date(crypto.getRandomValues(new Uint32Array(1))[0] - daysAgo * 24 * 60 * 60 * 1000);\n    return date.toISOString().split('T')[0];\n  }\n\n  private static getFutureDate(daysFromNow: number): string {\n    const date = new Date(crypto.getRandomValues(new Uint32Array(1))[0] + daysFromNow * 24 * 60 * 60 * 1000);\n    return date.toISOString().split('T')[0];\n  }\n}\n\n// Enterprise authentication service\nclass EnterpriseAuthService {\n  private static tokenCache: { token: string, expiresAt: number ,\n\n  static async authenticate(): Promise<string> {\n    if (this?.tokenCache && crypto.getRandomValues(new Uint32Array(1))[0] < this.tokenCache.expiresAt) {\n      return this.tokenCache.token;\n    }\n\n    const loginData = {\n      email: __ENV.TEST_REGISTRAR_EMAIL || 'test.registrar@hospital.com',\n      password: __ENV.TEST_REGISTRAR_PASSWORD || 'SecurePassword123!',\n      role: 'REGISTRAR',\n      mfaCode: __ENV.TEST_MFA_CODE || '123456', // For testing\n      deviceFingerprint: 'k6-performance-test'\n    ,\n    \n    const authStartTime = crypto.getRandomValues(new Uint32Array(1))[0];\n    const loginResponse = http.post(\n      `${CONFIG.baseUrl}/api/auth/login`,\n      JSON.stringify(loginData),\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': 'K6-HMS-Performance-Test/2.0.0',\n          'X-Test-Environment': 'true'\n        },\n        tags: { name: 'authentication' ,},\n        timeout: '10s'\n      ,\n    \n    const authDuration = crypto.getRandomValues(new Uint32Array(1))[0] - authStartTime;\n    \n    const authSuccess = check(loginResponse, {\n      'authentication successful': (r) => r.status === 200,\n      'auth token received': (r) => r.status === 200 && r.json('token') !== undefined,\n      'auth response time acceptable': () => authDuration < 5000,\n      'mfa validated': (r) => r.status === 200 && r.json('mfaValidated') === true\n    });\n    \n    if (!authSuccess || loginResponse.status !== 200) {\n      registrationErrors.add(1);\n      throw new Error(`Authentication failed: /* SECURITY: Template literal eliminated */\n    ,}\n    \n    const tokenData = loginResponse.json() as { token: string, expiresIn: number ,\n    const expiresAt = crypto.getRandomValues(new Uint32Array(1))[0] + (tokenData.expiresIn * 1000) - 60000; // 1 minute buffer\n    \n    this.tokenCache = {\n      token: tokenData.token,\n    \n    return tokenData.token;\n  }\n\n  static invalidateToken(): void {\n    this.tokenCache = null;\n  }\n}\n\n// Enterprise patient registration workflow tester\nclass PatientRegistrationWorkflowTester {\n  private headers: Record<string,\n  private requestId: string;\n\n  constructor(token: string) {\n    this.requestId = uuidv4();\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n      'Accept': 'application/json',\n      'User-Agent': 'K6-HMS-Performance-Test/2.0.0',\n      'X-Request-ID': this.requestId,\n      'X-Test-Session': `perf-test-${__VU}-${__ITER}`,\n      'X-Client-Version': '2.0.0',\n      'X-Platform': 'web'\n    };\n  }\n\n  async executeCompleteRegistrationWorkflow(): Promise<void> {\n    const workflowStartTime = crypto.getRandomValues(new Uint32Array(1))[0];\n    let patientData: PatientData;\n    let registrationResponse: RegistrationResponse | null = null;\n\n    try {\n      // Update concurrent registrations metric\n      concurrentRegistrations.add(1);\n      \n      // Estimate system resource utilization\n      const estimatedUtilization = Math.min(85, 20 + (concurrentRegistrations.value * 0.3));\n      systemResourceUtilization.add(estimatedUtilization);\n      \n      // Step 1: Generate comprehensive patient data\n      group('Patient Data Generation',\n      });\n      \n      // Step 2: HIPAA compliance validation\n      await this.validateHIPAACompliance(patientData!);\n      \n      // Step 3: Duplicate patient detection\n      await this.performDuplicateCheck(patientData!);\n      \n      // Step 4: Insurance verification\n      await this.verifyInsuranceEligibility(patientData!);\n      \n      // Step 5: Consent validation\n      await this.validatePatientConsents(patientData!);\n      \n      // Step 6: Main patient registration\n      registrationResponse = await this.registerPatient(patientData!);\n      \n      if (registrationResponse?.success) {\n        // Step 7: Setup patient portal\n        await this.setupPatientPortal(registrationResponse.patientId);\n        \n        // Step 8: Schedule initial appointment\n        await this.scheduleInitialAppointment(registrationResponse.patientId);\n        \n        // Step 9: Generate welcome packet\n        await this.generateWelcomePacket(registrationResponse.patientId);\n        \n        // Step 10: Complete workflow audit\n        await this.completeWorkflowAudit(registrationResponse.patientId,\n      }\n      \n    } catch (error) { console.error(error); } finally {\n      // Update concurrent registrations\n      concurrentRegistrations.add(-1);\n      \n      // Record total workflow duration\n      const totalDuration = crypto.getRandomValues(new Uint32Array(1))[0] - workflowStartTime;\n      registrationDuration.add(totalDuration);\n      \n      // Record success/failure\n      registrationSuccessRate.add(registrationResponse?.success ? 1 : 0);\n    }\n  }\n\n  private async validateHIPAACompliance(patientData: PatientData): Promise<void> {\n    return new Promise((resolve) => {\n      group('HIPAA Compliance Validation',\n        \n        const validationResponse = http.post(\n          `${CONFIG.baseUrl}/api/compliance/hipaa/validate`,\n          JSON.stringify({\n            patientData: this.sanitizePatientData(patientData),\n            validationType: 'pre_registration',\n            auditRequired: true,\n            encryptionRequired: true\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'hipaa_validation' ,},\n            timeout: '5s'\n          ,\n        \n        const hipaaEndTime = crypto.getRandomValues(new Uint32Array(1))[0];\n        hipaaValidationTime.add(hipaaEndTime - hipaaStartTime);\n        hipaaComplianceChecks.add(1);\n        \n        const hipaaSuccess = check(validationResponse, {\n          'HIPAA validation successful': (r) => r.status === 200,\n          'HIPAA compliance confirmed': (r) => r.json('hipaaCompliant') === true,\n          'data encryption verified': (r) => r.json('dataEncrypted') === true,\n          'audit trail created': (r) => r.json('auditTrailId') !== undefined,\n          'privacy controls verified': (r) => r.json('privacyControlsVerified') === true,\n          'HIPAA validation time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.maxHipaaValidationTime\n        });\n        \n        if (hipaaSuccess != null) {\n          dataEncryptionValidations.add(1);\n          // Update privacy score\n          const privacyScore = validationResponse.json('privacyScore') || 95;\n          dataPrivacyScore.add(privacyScore);\n        }\n        \n        resolve();\n      });\n    });\n  }\n\n  private async performDuplicateCheck(patientData: PatientData): Promise<void> {\n    return new Promise((resolve) => {\n      group('Duplicate Patient Detection',\n        \n        const duplicateCheckResponse = http.get(\n          `${CONFIG.baseUrl}/api/patients/duplicate-check?` + \n          `ssn=/* SECURITY: Safe parameter encoding */&` +\n          `dob=/* SECURITY: Safe parameter encoding */&` +\n          `firstName=/* SECURITY: Safe parameter encoding */&` +\n          `lastName=/* SECURITY: Safe parameter encoding */&` +\n          `phone=/* SECURITY: Safe parameter encoding */`,\n          {\n            headers: this.headers,\n            tags: { name: 'duplicate_check' ,},\n            timeout: '3s'\n          ,\n        \n        const duplicateEndTime = crypto.getRandomValues(new Uint32Array(1))[0];\n        duplicateCheckTime.add(duplicateEndTime - duplicateStartTime);\n        \n        check(duplicateCheckResponse, {\n          'duplicate check completed': (r) => r.status === 200,\n          'duplicate check response structure valid': (r) => {\n            const response = r.json();\n            return response && typeof response.duplicateFound === 'boolean';\n          },\n          'duplicate check time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.maxDuplicateCheckTime,\n          'matching algorithm executed': (r) => r.json('matchingScore') !== undefined\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  private async verifyInsuranceEligibility(patientData: PatientData): Promise<void> {\n    return new Promise((resolve) => {\n      group('Insurance Verification',\n        \n        const insuranceResponse = http.post(\n          `${CONFIG.baseUrl}/api/insurance/verify`,\n          JSON.stringify({\n            primaryInsurance: patientData.insuranceInfo.primaryInsurance,\n            secondaryInsurance: patientData.insuranceInfo.secondaryInsurance,\n            patientInfo: {\n              firstName: patientData.firstName,\n              lastName: patientData.lastName,\n              dateOfBirth: patientData.dateOfBirth,\n              ssn: patientData.ssn\n            ,},\n            verificationLevel: 'comprehensive',\n            includeBenefits: true,\n            includeAuthorizations: true\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'insurance_verification' ,},\n            timeout: '8s'\n          ,\n        \n        const insuranceEndTime = crypto.getRandomValues(new Uint32Array(1))[0];\n        insuranceVerificationTime.add(insuranceEndTime - insuranceStartTime);\n        \n        check(insuranceResponse, {\n          'insurance verification completed': (r) => r.status === 200,\n          'primary insurance verified': (r) => r.json('primaryVerified') === true,\n          'eligibility confirmed': (r) => r.json('eligibilityConfirmed') === true,\n          'benefits information received': (r) => r.json('benefitsDetails') !== undefined,\n          'authorization requirements identified': (r) => r.json('authorizationRequired') !== undefined,\n          'insurance verification time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.maxInsuranceVerificationTime\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  private async validatePatientConsents(patientData: PatientData): Promise<void> {\n    return new Promise((resolve) => {\n      group('Patient Consent Validation', () => {\n        const consentResponse = http.post(\n          `${CONFIG.baseUrl}/api/patients/consents/validate`,\n          JSON.stringify({\n            consentForms: patientData.consentForms,\n            requiredConsents: ['treatment_consent', 'hipaa_authorization', 'financial_responsibility'],\n            patientAge: this.calculateAge(patientData.dateOfBirth),\n            legalGuardianRequired: this.calculateAge(patientData.dateOfBirth) < 18\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'consent_validation' ,},\n            timeout: '3s'\n          ,\n        \n        patientConsentValidations.add(1);\n        \n        check(consentResponse, {\n          'consent validation completed': (r) => r.status === 200,\n          'required consents obtained': (r) => r.json('allRequiredConsentsObtained') === true,\n          'consent validation time acceptable': (r) => r.timings.duration < 2000\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  private async registerPatient(patientData: PatientData): Promise<RegistrationResponse> {\n    return new Promise((resolve, reject) => {\n      group('Patient Registration', () => {\n        const registrationStartTime = crypto.getRandomValues(new Uint32Array(1))[0];\n        \n        const registrationResponse = http.post(\n          `${CONFIG.baseUrl}/api/patients/register`,\n          JSON.stringify({\n            ...patientData,\n            registrationDate: new Date().toISOString(),\n            registeredBy: 'test.registrar@hospital.com',\n            facility: 'Main Hospital',\n            department: 'Registration',\n            registrationSource: 'in_person',\n            priority: 'routine',\n            requestId: this.requestId\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'patient_registration' ,},\n            timeout: '10s'\n          ,\n        \n        const registrationEndTime = crypto.getRandomValues(new Uint32Array(1))[0];\n        const _registrationTime = registrationEndTime - registrationStartTime;\n        \n        const registrationSuccess = check(registrationResponse, {\n          'patient registration successful': (r) => r.status === 201,\n          'patient ID assigned': (r) => r.json('patientId') !== undefined,\n          'MRN assigned': (r) => r.json('mrn') !== undefined,\n          'registration ID created': (r) => r.json('registrationId') !== undefined,\n          'audit trail created': (r) => r.json('auditTrailId') !== undefined,\n          'HIPAA audit log created': (r) => r.json('hipaaAuditLog') === true,\n          'consent status validated': (r) => r.json('consentStatus') !== undefined,\n          'insurance status included': (r) => r.json('insuranceVerificationStatus') !== undefined,\n          'registration time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.maxRegistrationTime\n        });\n        \n        if (registrationSuccess != null) {\n          auditLogCreation.add(1);\n          const response = registrationResponse.json() as RegistrationResponse;\n          resolve(response);\n        } else {\n          registrationErrors.add(1);\n          reject(new Error(`Patient registration failed: /* SECURITY: Template literal eliminated */\n        }\n      ,\n    });\n  }\n\n  private async setupPatientPortal(patientId: string): Promise<void> {\n    return new Promise((resolve) => {\n      group('Patient Portal Setup',\n        \n        const portalResponse = http.post(\n          `${CONFIG.baseUrl}/api/patients/${patientId}/portal/setup`,\n          JSON.stringify({\n            enablePortalAccess: true,\n            includeHealthRecords: true,\n            includeAppointmentScheduling: true,\n            includeBillingAccess: true,\n            includeTestResults: true,\n            notificationPreferences: {\n              email: true,\n              sms: true,\n              push: false\n            ,},\n            securitySettings: {\n              requireMFA: true,\n              sessionTimeout: 30,\n              passwordComplexity: 'high'\n            }\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'patient_portal_setup' ,},\n            timeout: '5s'\n          ,\n        \n        const portalEndTime = crypto.getRandomValues(new Uint32Array(1))[0];\n        patientPortalSetupTime.add(portalEndTime - portalStartTime);\n        \n        check(portalResponse, {\n          'portal setup successful': (r) => r.status === 201,\n          'portal credentials generated': (r) => r.json('portalCredentials') !== undefined,\n          'portal username created': (r) => r.json('portalCredentials.username') !== undefined,\n          'activation code generated': (r) => r.json('portalCredentials.activationCode') !== undefined,\n          'security settings applied': (r) => r.json('securitySettingsApplied') === true,\n          'portal setup time acceptable': (r) => r.timings.duration < 5000\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  private async scheduleInitialAppointment(patientId: string): Promise<void> {\n    return new Promise((resolve) => {\n      group('Initial Appointment Scheduling', () => {\n        const appointmentResponse = http.post(\n          `${CONFIG.baseUrl}/api/appointments/schedule`,\n          JSON.stringify({\n            patientId: patientId,\n            appointmentType: 'New Patient Consultation',\n            department: 'General Medicine',\n            preferredDate: this.getFutureDate(randomIntBetween(7, 30)),\n            preferredTimeSlot: randomItem(['morning', 'afternoon', 'evening']),\n            priority: 'routine',\n            notes: 'New patient registration - initial consultation',\n            providerPreference: 'any_available',\n            appointmentDuration: 60,\n            requiresPreAuthorization: false\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'appointment_scheduling' ,},\n            timeout: '5s'\n          ,\n        \n        check(appointmentResponse, {\n          'appointment scheduling successful': (r) => r.status === 201,\n          'appointment ID assigned': (r) => r.json('appointmentId') !== undefined,\n          'appointment date confirmed': (r) => r.json('scheduledDate') !== undefined,\n          'provider assigned': (r) => r.json('assignedProvider') !== undefined,\n          'appointment confirmation sent': (r) => r.json('confirmationSent') === true,\n          'appointment scheduling time acceptable': (r) => r.timings.duration < 3000\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  private async generateWelcomePacket(patientId: string): Promise<void> {\n    return new Promise((resolve) => {\n      group('Welcome Packet Generation',\n        \n        const welcomeResponse = http.post(\n          `${CONFIG.baseUrl}/api/patients/${patientId}/welcome-packet`,\n          JSON.stringify({\n            includePortalAccess: true,\n            includeInsuranceInfo: true,\n            includeHipaaNotice: true,\n            includeBillingInformation: true,\n            includeHealthEducationMaterials: true,\n            includeAppointmentInstructions: true,\n            deliveryMethod: randomItem(['email', 'sms', 'mail', 'portal']),\n            language: 'english',\n            format: 'pdf'\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'welcome_packet' ,},\n            timeout: '5s'\n          ,\n        \n        const welcomeEndTime = crypto.getRandomValues(new Uint32Array(1))[0];\n        welcomePacketGenerationTime.add(welcomeEndTime - welcomeStartTime);\n        \n        check(welcomeResponse, {\n          'welcome packet generated': (r) => r.status === 200,\n          'portal credentials included': (r) => r.json('portalCredentialsIncluded') === true,\n          'HIPAA notice included': (r) => r.json('hipaaNoticeIncluded') === true,\n          'welcome packet delivery scheduled': (r) => r.json('deliveryScheduled') === true,\n          'welcome packet time acceptable': (r) => r.timings.duration < 3000\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  private async completeWorkflowAudit(patientId: string, workflowStartTime: number): Promise<void> {\n    return new Promise((resolve) => {\n      group('Workflow Audit Completion',\n        \n        const auditResponse = http.post(\n          `${CONFIG.baseUrl}/api/audit/workflow-completion`,\n          JSON.stringify({\n            workflowType: 'patient_registration',\n            patientId: patientId,\n            totalTime: totalWorkflowTime,\n            requestId: this.requestId,\n            steps: [\n              'hipaa_validation',\n              'duplicate_check',\n              'insurance_verification',\n              'consent_validation',\n              'patient_registration',\n              'portal_setup',\n              'appointment_scheduling',\n              'welcome_packet_generation'\n            ],\n            completedBy: 'test.registrar@hospital.com',\n            facilityId: 'main-hospital',\n            complianceFlags: {\n              hipaaCompliant: true,\n              auditTrailComplete: true,\n              dataEncrypted: true,\n              consentVerified: true,\n              accessControlsVerified: true\n            ,},\n            performanceMetrics: {\n              workflowDuration: totalWorkflowTime,\n              systemUtilization: systemResourceUtilization.value,\n              privacyScore: dataPrivacyScore.value\n            }\n          ,}),\n          {\n            headers: this.headers,\n            tags: { name: 'workflow_audit' ,},\n            timeout: '3s'\n          ,\n        \n        check(auditResponse, {\n          'workflow audit logged': (r) => r.status === 200,\n          'compliance verification completed': (r) => r.json('complianceVerified') === true,\n          'audit trail finalized': (r) => r.json('auditTrailFinalized') === true,\n          'audit log time acceptable': (r) => r.timings.duration < 1000\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  // Utility methods\n  private sanitizePatientData(patientData: PatientData): Partial<PatientData> {\n    // Remove sensitive data for HIPAA validation\n    return {\n      firstName: patientData.firstName,\n      lastName: patientData.lastName,\n      dateOfBirth: patientData.dateOfBirth,\n      gender: patientData.gender,\n      preferredLanguage: patientData.preferredLanguage,\n      // Include structure but not actual sensitive values\n      address: },\n      insuranceInfo: {\n        primaryInsurance: {\n          ...patientData.insuranceInfo.primaryInsurance,\n          policyNumber: '[REDACTED]',\n          subscriberId: '[REDACTED]'\n        ,},\n        selfPay: patientData.insuranceInfo.selfPay\n      }\n    ,\n  }\n\n  private calculateAge(dateOfBirth: string): number {\n    const today = new Date();\n    const birthDate = new Date(dateOfBirth);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n    \n    return age;\n  }\n\n  private getFutureDate(daysFromNow: number): string {\n    const futureDate = new Date(crypto.getRandomValues(new Uint32Array(1))[0] + daysFromNow * 24 * 60 * 60 * 1000);\n    return futureDate.toISOString().split('T')[0];\n  }\n}\n\n// Setup function\nexport function setup(): { token: string } {\n  /* SECURITY: Console statement removed */\n  /* SECURITY: Console statement removed */\n  /* SECURITY: Console statement removed */\n  \n  // Verify API connectivity\n  const healthCheck = http.get(`${CONFIG.baseUrl,}/api/health`, { timeout: '10s' ,\n  if (healthCheck.status !== 200) {\n    fail(`API health check failed: ${healthCheck.status,\n  }\n  \n  /* SECURITY: Console statement removed */\n  \n  // Authenticate\n  const token = EnterpriseAuthService.authenticate();\n  if (!token) {\n    fail('Failed to obtain authentication token');\n  }\n  \n  /* SECURITY: Console statement removed */\n  /* SECURITY: Console statement removed */\n  \n  return { token ,\n}\n\n// Main test function\nexport default function(data: { token: string ,\n    return;\n  }\n  \n  const workflowTester = new PatientRegistrationWorkflowTester(data.token);\n  \n  try {\n    // Execute complete patient registration workflow\n    workflowTester.executeCompleteRegistrationWorkflow();\n    \n  } catch (error) { console.error(error); }\n  \n  // Realistic user behavior - time between registrations\n  const _scenario = __ENV.K6_SCENARIO_NAME || 'default';\n  const thinkTime = _scenario === 'emergency_registration' ? \n    randomIntBetween(1, 2) : \n    randomIntBetween(3, 8);\n  \n  sleep(thinkTime);\n}\n\n// Teardown function\nexport function teardown(data: { token: string ,\n  \n  // Log final metrics\n  /* SECURITY: Console statement removed */\n  /* SECURITY: Console statement removed */\n  /* SECURITY: Console statement removed */.toFixed(2),\n  /* SECURITY: Console statement removed */,\n  /* SECURITY: Console statement removed */\n  /* SECURITY: Console statement removed */\n  \n  /* SECURITY: Console statement removed */\n,}\n\n// Enhanced summary with healthcare-specific metrics\nexport function handleSummary(data: unknown): unknown {\n  const summary = {\n    timestamp: new Date().toISOString(),\n    test_type: 'patient_registration_workflow',\n    test_environment: CONFIG.testEnvironment,\n    duration_ms: data.state?.testRunDurationMs || 0,\n    total_iterations: data.metrics?.iterations?.values?.count || 0,\n    max_concurrent_users: data.metrics?.vus_max?.values?.max || 0,\n    \n    // Overall performance metrics\n    http_req_duration_p95: data.metrics?.http_req_duration?.values?.['p(95)'] || 0,\n    http_req_duration_p99: data.metrics?.http_req_duration?.values?.['p(99)'] || 0,\n    http_req_failed_rate: data.metrics?.http_req_failed?.values?.rate || 0,\n    http_reqs_per_second: data.metrics?.http_reqs?.values?.rate || 0,\n    \n    // Healthcare workflow metrics\n    registration_success_rate: data.metrics?.registration_success_rate?.values?.rate || 0,\n    registration_duration_avg: data.metrics?.registration_duration?.values?.avg || 0,\n    registration_duration_p95: data.metrics?.registration_duration?.values?.['p(95)'] || 0,\n    registration_duration_p99: data.metrics?.registration_duration?.values?.['p(99)'] || 0,\n    \n    // Compliance metrics\n    hipaa_validation_time_avg: data.metrics?.hipaa_validation_time?.values?.avg || 0,\n    hipaa_validation_time_p95: data.metrics?.hipaa_validation_time?.values?.['p(95)'] || 0,\n    hipaa_compliance_checks: data.metrics?.hipaa_compliance_checks?.values?.count || 0,\n    data_encryption_validations: data.metrics?.data_encryption_validations?.values?.count || 0,\n    patient_consent_validations: data.metrics?.patient_consent_validations?.values?.count || 0,\n    audit_log_entries: data.metrics?.audit_log_entries?.values?.count || 0,\n    \n    // Insurance verification metrics\n    insurance_verification_time_avg: data.metrics?.insurance_verification_time?.values?.avg || 0,\n    insurance_verification_time_p95: data.metrics?.insurance_verification_time?.values?.['p(95)'] || 0,\n    \n    // System performance metrics\n    duplicate_check_time_avg: data.metrics?.duplicate_check_time?.values?.avg || 0,\n    patient_portal_setup_time_avg: data.metrics?.patient_portal_setup_time?.values?.avg || 0,\n    welcome_packet_generation_time_avg: data.metrics?.welcome_packet_generation_time?.values?.avg || 0,\n    \n    // Error metrics\n    registration_errors: data.metrics?.registration_errors?.values?.count || 0,\n    \n    // Resource utilization\n    max_concurrent_registrations: data.metrics?.concurrent_registrations?.values?.max || 0,\n    avg_system_resource_utilization: data.metrics?.system_resource_utilization?.values?.avg || 0,\n    avg_data_privacy_score: data.metrics?.data_privacy_score?.values?.avg || 0,\n    \n    // Performance assessment\n    performance_grade: calculatePerformanceGrade(data),\n    healthcare_compliance_score: assessHealthcareCompliance(data),\n    recommendations: generateRecommendations(data)\n  ,\n  \n  const textReport = generateTextSummary(summary);\n  const htmlReport = generateHTMLReport(summary, data);\n  \n  return {\n    'patient-registration-performance-results.json': JSON.stringify(summary, null, 2),\n    'patient-registration-performance-report.html': htmlReport,\n    'patient-registration-performance-summary.txt': textReport,\n    stdout: textSummary(data, })\n  ,};\n}\n\n// Performance assessment functions\nfunction calculatePerformanceGrade(data: unknown): string {\n  const p95 = data.metrics?.http_req_duration?.values?.['p(95)'] || Infinity;\n  const errorRate = data.metrics?.http_req_failed?.values?.rate || 1;\n  const registrationSuccess = data.metrics?.registration_success_rate?.values?.rate || 0;\n  const hipaaValidationTime = data.metrics?.hipaa_validation_time?.values?.['p(95)'] || Infinity;\n  \n  if (p95 < 2000 && errorRate < 0?.005 && registrationSuccess > 0?.995 && hipaaValidationTime < 1000) {\n    return 'A';\n  } else if (p95 < 3000 && errorRate < 0?.01 && registrationSuccess > 0?.99 && hipaaValidationTime < 1500) {\n    return 'B';\n  } else if (p95 < 5000 && errorRate < 0?.02 && registrationSuccess > 0?.98 && hipaaValidationTime < 2000) {\n    return 'C';\n  } else if (p95 < 8000 && errorRate < 0?.05 && registrationSuccess > 0.95) {\n    return 'D';\n  } else {\n    return 'F';\n  }\n}\n\nfunction assessHealthcareCompliance(data: unknown): number {\n  let score = 100;\n  \n  // HIPAA compliance\n  const hipaaValidationTime = data.metrics?.hipaa_validation_time?.values?.['p(95)'] || Infinity;\n  if (hipaaValidationTime > 2000) score -= 15;\n  else if (hipaaValidationTime > 1000) score -= 8;\n  \n  // Registration success rate\n  const registrationSuccess = data.metrics?.registration_success_rate?.values?.rate || 0;\n  if (registrationSuccess < 0.99) score -= 20;\n  else if (registrationSuccess < 0.995) score -= 10;\n  \n  // Error rate\n  const errorRate = data.metrics?.http_req_failed?.values?.rate || 1;\n  if (errorRate > 0.01) score -= 15;\n  else if (errorRate > 0.005) score -= 8;\n  \n  // Data privacy score\n  const privacyScore = data.metrics?.data_privacy_score?.values?.avg || 0;\n  if (privacyScore < 90) score -= 20;\n  else if (privacyScore < 95) score -= 10;\n  \n  return Math.max(0, score);\n}\n\nfunction generateRecommendations(data: unknown): string[] {\n  const recommendations: string[] = [];\n  \n  const p95 = data.metrics?.http_req_duration?.values?.['p(95)'] || 0;\n  const errorRate = data.metrics?.http_req_failed?.values?.rate || 0;\n  const registrationSuccess = data.metrics?.registration_success_rate?.values?.rate || 0;\n  const hipaaValidationTime = data.metrics?.hipaa_validation_time?.values?.['p(95)'] || 0;\n  const insuranceVerificationTime = data.metrics?.insurance_verification_time?.values?.['p(95)'] || 0;\n  \n  if (p95 > 3000) {\n    recommendations.push('Consider optimizing database queries and adding caching layers to improve response times');\n  }\n  \n  if (errorRate > 0.01) {\n    recommendations.push('Investigate error causes and implement better error handling and retry mechanisms');\n  }\n  \n  if (registrationSuccess < 0.99) {\n    recommendations.push('Review registration workflow for bottlenecks and implement fallback procedures');\n  }\n  \n  if (hipaaValidationTime > 1000) {\n    recommendations.push('Optimize HIPAA compliance validation process to meet healthcare performance standards');\n  }\n  \n  if (insuranceVerificationTime > 5000) {\n    recommendations.push('Consider implementing asynchronous insurance verification or caching verified results');\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push('System performance meets all healthcare standards. Continue monitoring.');\n  }\n  \n  return recommendations;\n}\n\nfunction generateTextSummary(summary: unknown): string {\n  return `\nPatient Registration Workflow Performance Test Summary\n=======================================================\n\nTest Information:\n- Test Type: ${summary.test_type}\n- Environment: ${summary.test_environment}\n- Duration: ${(summary.duration_ms / 1000).toFixed(1)} seconds\n- Total Registrations: ${summary.total_iterations}\n- Max Concurrent Users: ${summary.max_concurrent_users}\n\nPerformance Metrics:\n- Registration Success Rate: ${(summary.registration_success_rate * 100).toFixed(2)}%\n- Average Registration Time: ${summary.registration_duration_avg.toFixed(2)}ms\n- 95th Percentile Registration Time: ${summary.registration_duration_p95.toFixed(2)}ms\n- HTTP Error Rate: ${(summary.http_req_failed_rate * 100).toFixed(3)}%\n\nHealthcare Compliance:\n- HIPAA Validations: ${summary.hipaa_compliance_checks}\n- Average HIPAA Validation Time: ${summary.hipaa_validation_time_avg.toFixed(2)}ms\n- Data Encryption Validations: ${summary.data_encryption_validations}\n- Audit Log Entries: ${summary.audit_log_entries}\n- Privacy Score: ${summary.avg_data_privacy_score.toFixed(1)}/100\n\nWorkflow Components:\n- Average Insurance Verification: ${summary.insurance_verification_time_avg.toFixed(2)}ms\n- Average Duplicate Check: ${summary.duplicate_check_time_avg.toFixed(2)}ms\n- Average Portal Setup: ${summary.patient_portal_setup_time_avg.toFixed(2)}ms\n- Average Welcome Packet: ${summary.welcome_packet_generation_time_avg.toFixed(2)}ms\n\nAssessment:\n- Performance Grade: ${summary.performance_grade}\n- Healthcare Compliance Score: ${summary.healthcare_compliance_score,}/100\n\nRecommendations:\n${summary.recommendations.map((rec: string, index: number) => `${index + 1}. ${rec}`).join('\\n'),\n}\n\nfunction generateHTMLReport(summary: unknown, data: unknown): string {\n  return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Patient Registration Workflow Performance Report</title>\n    <style>\n        body { font-family: 'Segoe UI', Arial, sans-serif, margin: 0; padding: 20px, background: #f5f7fa ,}\n        .container { max-width: 1200px, background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1), overflow: hidden ,}\n        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%), color: white; padding: 30px; text-align: center , font-size: 28px; font-weight: 300 ,}\n        .header p { margin: 10px 0 0 0, opacity: 0.9 , grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)), gap: 20px; padding: 30px , border-radius: 8px, border-left: 4px solid #667eea ,}\n        .metric-title { font-size: 14px, font-weight: 600; margin-bottom: 8px , font-weight: bold, margin-bottom: 4px ,}\n        .metric-unit { font-size: 12px, color: #95a5a6 }\n        .success { border-left-color: #27ae60 }\n        .warning { border-left-color: #f39c12 }\n        .danger { border-left-color: #e74c3c , border-top: 1px solid #eee , margin-bottom: 20px , font-weight: bold, text-align: center; border-radius: 50%, height: 80px; line-height: 80px, margin: 20px auto ,}\n        .grade-A { background: #2ecc71, color: white ,}\n        .grade-B { background: #3498db, color: white ,}\n        .grade-C { background: #f39c12, color: white ,}\n        .grade-D { background: #e67e22, color: white ,}\n        .grade-F { background: #e74c3c, color: white ,}\n        .recommendations { background: #ecf0f1, border-radius: 8px; margin-top: 20px , padding-left: 20px }\n        .recommendations li { margin-bottom: 8px }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🏥 Patient Registration Workflow Performance Report</h1>\n            <p>Generated on ${summary.timestamp}</p>\n            <p>Environment: ${summary.test_environment} | Duration: ${(summary.duration_ms / 1000).toFixed(1)}s</p>\n        </div>\n        \n        <div class=\"metrics-grid\">\n            <div class=\"metric-card success\">\n                <div class=\"metric-title\">Total Registrations</div>\n                <div class=\"metric-value\">${summary.total_iterations}</div>\n            </div>\n            \n            <div class=\"metric-card ${summary.registration_success_rate > 0.995 ? 'success' : summary.registration_success_rate > 0.99 ? 'warning' : 'danger'}\">\n                <div class=\"metric-title\">Success Rate</div>\n                <div class=\"metric-value\">${(summary.registration_success_rate * 100).toFixed(2)}<span class=\"metric-unit\">%</span></div>\n            </div>\n            \n            <div class=\"metric-card ${summary.registration_duration_p95 < 15000 ? 'success' : summary.registration_duration_p95 < 25000 ? 'warning' : 'danger'}\">\n                <div class=\"metric-title\">95th Percentile Time</div>\n                <div class=\"metric-value\">${(summary.registration_duration_p95 / 1000).toFixed(1)}<span class=\"metric-unit\">s</span></div>\n            </div>\n            \n            <div class=\"metric-card ${summary.hipaa_validation_time_p95 < 1000 ? 'success' : summary.hipaa_validation_time_p95 < 2000 ? 'warning' : 'danger'}\">\n                <div class=\"metric-title\">HIPAA Validation (95th)</div>\n                <div class=\"metric-value\">${summary.hipaa_validation_time_p95.toFixed(0), align-items: center,\">\n                <div class=\"grade grade-${summary.performance_grade}\">${summary.performance_grade}</div>\n                <div>\n                    <h3>Healthcare Compliance Score: ${summary.healthcare_compliance_score}/100</h3>\n                    <p>This system ${summary.healthcare_compliance_score >= 90 ? 'meets' : 'does not meet'} healthcare industry performance standards.</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>Healthcare Workflow Metrics</h2>\n            <div class=\"metrics-grid\">\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">Insurance Verification</div>\n                    <div class=\"metric-value\">${summary.insurance_verification_time_avg.toFixed(0)}<span class=\"metric-unit\">ms avg</span></div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">Duplicate Detection</div>\n                    <div class=\"metric-value\">${summary.duplicate_check_time_avg.toFixed(0)}<span class=\"metric-unit\">ms avg</span></div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">Portal Setup</div>\n                    <div class=\"metric-value\">${summary.patient_portal_setup_time_avg.toFixed(0)}<span class=\"metric-unit\">ms avg</span></div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">Welcome Packet</div>\n                    <div class=\"metric-value\">${summary.welcome_packet_generation_time_avg.toFixed(0)}<span class=\"metric-unit\">ms avg</span></div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>Compliance & Security Metrics</h2>\n            <div class=\"metrics-grid\">\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">HIPAA Validations</div>\n                    <div class=\"metric-value\">${summary.hipaa_compliance_checks}</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">Audit Log Entries</div>\n                    <div class=\"metric-value\">${summary.audit_log_entries}</div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">Data Privacy Score</div>\n                    <div class=\"metric-value\">${summary.avg_data_privacy_score.toFixed(1)}<span class=\"metric-unit\">/100</span></div>\n                </div>\n                <div class=\"metric-card\">\n                    <div class=\"metric-title\">Encryption Validations</div>\n                    <div class=\"metric-value\">${summary.data_encryption_validations}</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>Recommendations</h2>\n            <div class=\"recommendations\">\n                <ul>\n                    ${summary.recommendations.map((rec: string) => `<li>${rec}</li>`).join(''),\n}\n\n// Export for external use\nexport { CONFIG, EnterpriseHealthcareDataGenerator, PatientRegistrationWorkflowTester };\n";
