/**\n * Comprehensive Load Testing Suite - Enterprise TypeScript Version\n * Hospital Management System\n * \n * Enterprise-grade performance testing framework covering all critical HMS modules\n * with advanced monitoring, healthcare-specific validations, and real-time analytics.\n * \n * Test Coverage:\n * - Health & System Monitoring\n * - Patient Management System\n * - Billing & Revenue Cycle\n * - Appointment Scheduling\n * - Laboratory Management\n * - Inpatient Department (IPD)\n * - Pharmacy Operations\n * - Clinical Documentation\n * - Emergency Department\n * - Reporting & Analytics\n * \n * Performance Standards:\n * - Healthcare Industry Response Times\n * - HIPAA Compliance Monitoring\n * - Real-time System Health\n * - Resource Utilization Tracking\n * - User Experience Metrics\n * \n * @version 2.0.0\n * @author HMS Development Team\n * @compliance HIPAA, HL7 FHIR R4, Healthcare Performance Standards\n */\n\nimport http, { RefinedResponse, ResponseType } from 'k6/http';\nimport { check, sleep, group, fail } from 'k6';\nimport { Rate, Trend, Counter, Gauge } from 'k6/metrics';\nimport { randomItem, randomIntBetween, randomString } from 'https://jslib.k6.io/k6-utils/1.4.0/index.js';\nimport { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.4.0/index.js';\nimport { textSummary } from 'https://jslib.k6.io/k6-summary/0.0.1/index.js';\n\n// Enterprise metrics for comprehensive monitoring\nconst errorRate = new Rate('errors');\nconst responseTimeTrend = new Trend('response_time');\nconst apiCallsCounter = new Counter('api_calls');\nconst authenticationLatency = new Trend('authentication_latency');\nconst databaseResponseTime = new Trend('database_response_time');\nconst cacheHitRate = new Rate('cache_hit_rate');\nconst systemHealthScore = new Gauge('system_health_score');\nconst concurrentConnections = new Gauge('concurrent_connections');\nconst memoryUtilization = new Gauge('memory_utilization');\nconst cpuUtilization = new Gauge('cpu_utilization');\n\n// Healthcare-specific metrics\nconst patientOperationLatency = new Trend('patient_operation_latency');\nconst billingProcessingTime = new Trend('billing_processing_time');\nconst appointmentBookingTime = new Trend('appointment_booking_time');\nconst labOrderProcessingTime = new Trend('lab_order_processing_time');\nconst ipdOperationTime = new Trend('ipd_operation_time');\nconst emergencyResponseTime = new Trend('emergency_response_time');\nconst clinicalDataAccessTime = new Trend('clinical_data_access_time');\nconst reportGenerationTime = new Trend('report_generation_time');\nconst hipaaComplianceScore = new Gauge('hipaa_compliance_score');\nconst dataPrivacyScore = new Gauge('data_privacy_score');\nconst auditTrailCompleteness = new Rate('audit_trail_completeness');\n\n// Type definitions for test configuration and data\ninterface TestCredentials {\n  readonly email: string;\n  readonly password: string;\n  readonly role?: string;\n  readonly mfaCode?: string;\n}\n\ninterface TestPatient {\n  readonly id?: string;\n  readonly mrn: string;\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly dateOfBirth?: string;\n  readonly phone?: string;\n  readonly email?: string;\n}\n\ninterface TestConfiguration {\n  readonly baseUrl: string;\n  readonly apiVersion: string;\n  readonly testEnvironment: 'development' | 'staging' | 'production';\n  readonly credentials: TestCredentials;\n  readonly performanceThresholds: PerformanceThresholds;\n  readonly monitoringConfig: MonitoringConfig;\n  readonly testData: TestData;\n}\n\ninterface PerformanceThresholds {\n  readonly maxResponseTime: number;\n  readonly maxErrorRate: number;\n  readonly healthCheckMaxTime: number;\n  readonly databaseMaxTime: number;\n  readonly authenticationMaxTime: number;\n  readonly patientOperationMaxTime: number;\n  readonly billingMaxTime: number;\n  readonly appointmentMaxTime: number;\n  readonly labOrderMaxTime: number;\n  readonly ipdOperationMaxTime: number;\n  readonly emergencyMaxTime: number;\n}\n\ninterface MonitoringConfig {\n  readonly enableRealTimeMetrics: boolean;\n  readonly enableDetailedLogging: boolean;\n  readonly alertingEnabled: boolean;\n  readonly metricsCollectionInterval: number;\n  readonly healthCheckInterval: number;\n}\n\ninterface TestData {\n  readonly patients: readonly TestPatient[];\n  readonly doctors: readonly { id: string, specialty: string ,\n  readonly departments: readonly string[];\n  readonly serviceItems: readonly { id: string, price: number ,\n  readonly medications: readonly { id: string, dosage: string ,\n}\n\ninterface APIResponse<T> {\n  readonly success: boolean;\n  readonly data?: T;\n  readonly error?: string;\n  readonly message?: string;\n  readonly timestamp: string;\n  readonly requestId?: string;\n  readonly processingTime?: number;\n}\n\ninterface AuthResponse {\n  readonly tokens: {\n    readonly accessToken: string;\n    readonly refreshToken: string;\n    readonly expiresIn: number;\n  };\n  readonly user: {\n    readonly id: string;\n    readonly email: string;\n    readonly role: string;\n    readonly permissions: readonly string[];\n  };\n  readonly sessionId: string;\n  readonly mfaRequired: boolean;\n}\n\ninterface HealthStatus {\n  readonly status: 'healthy' | 'degraded' | 'unhealthy';\n  readonly version: string;\n  readonly timestamp: string;\n  readonly uptime: number;\n  readonly services: Record<string,\n  readonly metrics: {\n    readonly responseTime: number;\n    readonly memoryUsage: number;\n    readonly cpuUsage: number;\n    readonly activeConnections: number;\n  };\n}\n\ninterface ServiceHealth {\n  readonly status: 'healthy' | 'degraded' | 'unhealthy';\n  readonly responseTime?: number;\n  readonly lastCheck: string;\n  readonly errorRate?: number;\n}\n\n// Enterprise test configuration with healthcare-specific settings\nexport const options = {\n  scenarios: {\n    // Normal business hours load (8 AM - 6 PM)\n    business_hours_load: {\n      executor: 'ramping-vus',\n      startVUs: 5,\n      stages: [\n        { duration: '3m', target: 15 ,},    // Morning ramp-up\n        { duration: '10m', target: 40 ,},   // Peak morning hours\n        { duration: '5m', target: 30 ,},    // Mid-day stabilization\n        { duration: '10m', target: 50 ,},   // Afternoon peak\n        { duration: '5m', target: 25 ,},    // Evening wind-down\n        { duration: '2m', target: 10 ,},    // Night operations\n        { duration: '1m', target: 0 ,},     // Cleanup\n      ],\n      gracefulRampDown: '30s',\n      tags: { scenario: 'business_hours' ,},\n    },\n\n    // Emergency department load (24/7 with peaks)\n    emergency_department_load: {\n      executor: 'ramping-arrival-rate',\n      startRate: 3,\n      timeUnit: '1m',\n      preAllocatedVUs: 20,\n      maxVUs: 80,\n      stages: [\n        { duration: '2m', target: 8 ,},     // Regular ED activity\n        { duration: '3m', target: 20 ,},    // Emergency surge\n        { duration: '5m', target: 15 ,},    // High activity sustained\n        { duration: '3m', target: 5 ,},     // Return to normal\n        { duration: '2m', target: 3 ,},     // Low activity\n      ],\n      tags: { scenario: 'emergency_department' ,},\n    },\n\n    // Scheduled batch processing (reports, billing)\n    batch_processing_load: {\n      executor: 'constant-arrival-rate',\n      rate: 25,\n      timeUnit: '1s',\n      duration: '8m',\n      preAllocatedVUs: 30,\n      maxVUs: 100,\n      tags: { scenario: 'batch_processing' ,},\n    },\n\n    // Critical system operations (always responsive)\n    critical_operations_load: {\n      executor: 'constant-vus',\n      vus: 15,\n      duration: '15m',\n      tags: { scenario: 'critical_operations' ,},\n    },\n\n    // Peak load stress test\n    peak_load_stress: {\n      executor: 'ramping-vus',\n      startVUs: 20,\n      stages: [\n        { duration: '2m', target: 60 ,},    // Ramp to normal peak\n        { duration: '3m', target: 120 ,},   // High load\n        { duration: '3m', target: 180 ,},   // Stress level\n        { duration: '2m', target: 240 ,},   // Maximum capacity\n        { duration: '3m', target: 120 ,},   // Recovery\n        { duration: '2m', target: 60 ,},    // Stabilization\n        { duration: '1m', target: 0 ,},     // Cleanup\n      ],\n      tags: { scenario: 'peak_stress' ,},\n    },\n\n    // System stability test (long duration)\n    system_stability: {\n      executor: 'constant-vus',\n      vus: 35,\n      duration: '30m',\n      tags: { scenario: 'stability_test' ,},\n    },\n  },\n\n  // Healthcare industry performance thresholds\n  thresholds: {\n    // Overall system performance\n    'http_req_duration': ['p(95)<2500', 'p(99)<4000'],\n    'http_req_failed': ['rate<0.003'],  // 0.3% error rate\n    \n    // Healthcare-specific performance requirements\n    'patient_operation_latency': ['p(95)<1500', 'p(99)<2500'],\n    'billing_processing_time': ['p(95)<3000', 'p(99)<5000'],\n    'appointment_booking_time': ['p(95)<2000', 'p(99)<3000'],\n    'lab_order_processing_time': ['p(95)<2500', 'p(99)<4000'],\n    'ipd_operation_time': ['p(95)<2000', 'p(99)<3500'],\n    'emergency_response_time': ['p(95)<800', 'p(99)<1200'],\n    'clinical_data_access_time': ['p(95)<1000', 'p(99)<1800'],\n    \n    // System health requirements\n    'authentication_latency': ['p(95)<1000', 'p(99)<2000'],\n    'database_response_time': ['p(95)<1500', 'p(99)<2500'],\n    'system_health_score': ['value>85'],         // Health score above 85%\n    'hipaa_compliance_score': ['value>95'],      // HIPAA compliance above 95%\n    'data_privacy_score': ['value>90'],          // Privacy score above 90%\n    'audit_trail_completeness': ['rate>0.99'],   // 99% audit completeness\n    \n    // Scenario-specific thresholds\n    'http_req_duration{scenario:emergency_department,}': ['p(95)<1000'],\n    'http_req_failed{scenario:emergency_department,}': ['rate<0.001'],\n    'http_req_duration{scenario:critical_operations,}': ['p(95)<1500'],\n    \n    // Resource utilization limits\n    'concurrent_connections': ['value<500'],\n    'memory_utilization': ['value<85'],          // 85% memory limit\n    'cpu_utilization': ['value<80'],             // 80% CPU limit\n    'cache_hit_rate': ['rate>0.80'],             // 80% cache hit rate\n  },\n\n  summaryTrendStats: ['min', 'med', 'avg', 'p(90)', 'p(95)', 'p(99)', 'p(99.9)', 'max', 'count'],\n  summaryTimeUnit: 'ms',\n  \n  // Extended timeouts for healthcare operations\n  setupTimeout: '60s',\n  teardownTimeout: '60s',\n  noConnectionReuse: false,\n  userAgent: 'K6-HMS-LoadTest/2.0.0',\n  \n  // External monitoring integration\n  ext: {\n    influxdb: {\n      enabled: true,\n      addr: 'http://localhost:8086',\n      db: 'k6_hms_load_tests',\n      insecureSkipTLSVerify: true,\n    },\n    prometheus: {\n      enabled: true,\n      addr: 'localhost:9090',\n    },\n  },\n};\n\n// Configuration with environment support\nconst CONFIG: TestConfiguration = {\n  baseUrl: __ENV.HMS_BASE_URL || 'http://localhost:3000',\n  apiVersion: 'v1',\n  testEnvironment: (__ENV.TEST_ENVIRONMENT as any) || 'staging',\n  credentials: {\n    email: __ENV.TEST_EMAIL || 'load.test@hospital.com',\n    password: __ENV.TEST_PASSWORD || 'LoadTest123!',\n    role: 'ADMIN',\n    mfaCode: __ENV.TEST_MFA_CODE || '123456'\n  ,},\n  performanceThresholds: {\n    maxResponseTime: 2500,\n    maxErrorRate: 0.003,\n    healthCheckMaxTime: 500,\n    databaseMaxTime: 1500,\n    authenticationMaxTime: 1000,\n    patientOperationMaxTime: 1500,\n    billingMaxTime: 3000,\n    appointmentMaxTime: 2000,\n    labOrderMaxTime: 2500,\n    ipdOperationMaxTime: 2000,\n    emergencyMaxTime: 800,\n  },\n  monitoringConfig: {\n    enableRealTimeMetrics: true,\n    enableDetailedLogging: false,\n    alertingEnabled: true,\n    metricsCollectionInterval: 5000,\n    healthCheckInterval: 10000,\n  },\n  testData: {\n    patients: [\n      { mrn: 'MRN001', firstName: 'John', lastName: 'Doe', dateOfBirth: '1990-01-15', phone: '555-123-4567' ,},\n      { mrn: 'MRN002', firstName: 'Jane', lastName: 'Smith', dateOfBirth: '1985-03-22', phone: '555-234-5678' ,},\n      { mrn: 'MRN003', firstName: 'Bob', lastName: 'Johnson', dateOfBirth: '1978-07-10', phone: '555-345-6789' ,},\n      { mrn: 'MRN004', firstName: 'Alice', lastName: 'Brown', dateOfBirth: '1992-11-05', phone: '555-456-7890' ,},\n      { mrn: 'MRN005', firstName: 'Charlie', lastName: 'Wilson', dateOfBirth: '1988-05-18', phone: '555-567-8901' ,},\n    ],\n    doctors: [\n      { id: 'DOC001', name: 'Dr. Michael Chen', specialty: 'Cardiology' ,},\n      { id: 'DOC002', name: 'Dr. Sarah Williams', specialty: 'Internal Medicine' ,},\n      { id: 'DOC003', name: 'Dr. David Rodriguez', specialty: 'Emergency Medicine' ,},\n      { id: 'DOC004', name: 'Dr. Emily Davis', specialty: 'Pediatrics' ,},\n      { id: 'DOC005', name: 'Dr. Robert Lee', specialty: 'Orthopedics' ,},\n    ],\n    departments: [\n      'Emergency Department', 'Cardiology', 'Internal Medicine', 'Pediatrics',\n      'Orthopedics', 'Laboratory', 'Radiology', 'Surgery', 'ICU', 'Pharmacy'\n    ],\n    serviceItems: [\n      { id: 'SRV001', name: 'General Consultation', price: 150.00 ,},\n      { id: 'SRV002', name: 'Laboratory Panel', price: 200.00 ,},\n      { id: 'SRV003', name: 'X-Ray Examination', price: 125.00 ,},\n      { id: 'SRV004', name: 'ECG', price: 75.00 ,},\n      { id: 'SRV005', name: 'Ultrasound', price: 250.00 ,},\n    ],\n    medications: [\n      { id: 'MED001', name: 'Lisinopril', dosage: '10mg' ,},\n      { id: 'MED002', name: 'Metformin', dosage: '500mg' ,},\n      { id: 'MED003', name: 'Atorvastatin', dosage: '20mg' ,},\n      { id: 'MED004', name: 'Albuterol', dosage: '90mcg' ,},\n      { id: 'MED005', name: 'Omeprazole', dosage: '20mg' ,},\n    ],\n  },\n};\n\n// Enterprise authentication service\nclass EnterpriseAuthService {\n  private static tokenCache: { token: string, expiresAt: number ,\n\n  static async authenticate(): Promise<string> {\n    if (this?.tokenCache && crypto.getRandomValues(new Uint32Array(1))[0] < this.tokenCache.expiresAt) {\n      return this.tokenCache.token;\n    }\n\n    const authStartTime = crypto.getRandomValues(new Uint32Array(1))[0];\n    const loginResponse = http.post(\n      `${CONFIG.baseUrl}/api/auth/login`,\n      JSON.stringify(CONFIG.credentials),\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': 'K6-HMS-LoadTest/2.0.0',\n          'X-Test-Environment': 'true'\n        },\n        tags: { name: 'authentication' ,},\n        timeout: '10s'\n      ,\n    \n    const authDuration = crypto.getRandomValues(new Uint32Array(1))[0] - authStartTime;\n    authenticationLatency.add(authDuration);\n    \n    const authSuccess = check(loginResponse, {\n      'authentication successful': (r) => r.status === 200,\n      'auth token received': (r) => r.status === 200 && r.json('tokens.accessToken') !== undefined,\n      'auth response time acceptable': () => authDuration < CONFIG.performanceThresholds.authenticationMaxTime\n    });\n    \n    if (!authSuccess || loginResponse.status !== 200) {\n      errorRate.add(1);\n      throw new Error(`Authentication failed: ${loginResponse.status} ${loginResponse.body,\n    }\n    \n    const authData = loginResponse.json() as AuthResponse;\n    const expiresAt = crypto.getRandomValues(new Uint32Array(1))[0] + (authData.tokens.expiresIn * 1000) - 60000; // 1 minute buffer\n    \n    this.tokenCache = {\n      token: authData.tokens.accessToken,\n    \n    return authData.tokens.accessToken;\n  }\n\n  static invalidateToken(): void {\n    this.tokenCache = null;\n  }\n}\n\n// Enterprise load testing framework\nclass EnterpriseLoadTester {\n  private headers: Record<string,\n  private requestId: string;\n\n  constructor(authToken: string) {\n    this.requestId = uuidv4();\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authToken}`,\n      'Accept': 'application/json',\n      'User-Agent': 'K6-HMS-LoadTest/2.0.0',\n      'X-Request-ID': this.requestId,\n      'X-Test-Session': `load-test-${__VU}-${__ITER}`,\n      'X-Client-Version': '2.0.0'\n    };\n  }\n\n  // System health and monitoring tests\n  testHealthEndpoints(): void {\n    group('System Health & Monitoring', () => {\n      // Main health check\n      const healthResponse = http.get(`${CONFIG.baseUrl}/api/health`, {\n        headers: this.headers,\n        tags: { name: 'health_check' ,},\n        timeout: '3s'\n      ,\n      \n      const healthSuccess = check(healthResponse, {\n        'health check status is 200': (r) => r.status === 200,\n        'health check response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.healthCheckMaxTime,\n        'health status is healthy': (r) => {\n          try {\n            const health = r.json() as HealthStatus;\n            return health.status === 'healthy';\n          } catch (error) { console.error(error); }\n        },\n        'system metrics present': (r) => {\n          try {\n            const health = r.json() as HealthStatus;\n            return health.metrics !== undefined;\n          } catch (error) { console.error(error); }\n        }\n      });\n      \n      this.recordMetrics(healthResponse, 'health_check');\n      \n      if (healthSuccess != null) {\n        try {\n          const health = healthResponse.json() as HealthStatus;\n          systemHealthScore.add(health.status === 'healthy' ? 100 : health.status === 'degraded' ? 70 : 30);\n          \n          if (health.metrics) {\n            memoryUtilization.add(health.metrics.memoryUsage);\n            cpuUtilization.add(health.metrics.cpuUsage);\n            concurrentConnections.add(health.metrics.activeConnections);\n          }\n        } catch (error) { console.error(error); }\n      }\n      \n      // Database health check\n      const dbHealthResponse = http.get(`${CONFIG.baseUrl}/api/health/database`, {\n        headers: this.headers,\n        tags: { name: 'db_health_check' ,},\n        timeout: '5s'\n      ,\n      \n      check(dbHealthResponse, {\n        'database health check successful': (r) => r.status === 200,\n        'database response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.databaseMaxTime\n      });\n      \n      databaseResponseTime.add(dbHealthResponse.timings.duration);\n      this.recordMetrics(dbHealthResponse, 'db_health_check');\n      \n      // Cache health check\n      const cacheHealthResponse = http.get(`${CONFIG.baseUrl}/api/health/cache`, {\n        headers: this.headers,\n        tags: { name: 'cache_health_check' ,},\n        timeout: '3s'\n      ,\n      \n      check(cacheHealthResponse, {\n        'cache health check successful': (r) => r.status === 200,\n        'cache response time acceptable': (r) => r.timings.duration < 1000\n      });\n      \n      if (cacheHealthResponse.status === 200) {\n        try {\n          const cacheHealth = cacheHealthResponse.json() as { hitRate: number ,\n          cacheHitRate.add(cacheHealth.hitRate || 0);\n        } catch (error) { console.error(error); }\n      }\n      \n      this.recordMetrics(cacheHealthResponse, 'cache_health_check');\n    });\n  }\n\n  // Patient management system tests\n  testPatientEndpoints(): void {\n    group('Patient Management System', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // Get patients list with pagination\n      const patientsResponse = http.get(\n        `${CONFIG.baseUrl}/api/patients?page=1&limit=25&sort=lastName`,\n        {\n          headers: this.headers,\n          tags: { name: 'get_patients' ,},\n          timeout: '5s'\n        ,\n      \n      check(patientsResponse, {\n        'get patients successful': (r) => r.status === 200,\n        'get patients response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.patientOperationMaxTime,\n        'patients data structure valid': (r) => {\n          try {\n            const response = r.json() as APIResponse<{ patients: unknown[], total: number ,\n            return response?.success && Array.isArray(response.data?.patients);\n          } catch (error) { console.error(error); }\n        },\n        'audit trail present': (r) => {\n          try {\n            const response = r.json() as APIResponse<any>;\n            return response.requestId !== undefined;\n          } catch (error) { console.error(error); }\n        }\n      });\n      \n      this.recordMetrics(patientsResponse, 'get_patients');\n      \n      // Search patients\n      const searchTerm = randomItem(['John', 'Jane', 'Smith', 'Brown', 'Johnson']);\n      const searchResponse = http.get(\n        `${CONFIG.baseUrl}/api/patients/search?q=${encodeURIComponent(searchTerm)}&limit=10`,\n        {\n          headers: this.headers,\n          tags: { name: 'search_patients' ,},\n          timeout: '3s'\n        ,\n      \n      check(searchResponse, {\n        'patient search successful': (r) => r.status === 200,\n        'patient search response time acceptable': (r) => r.timings.duration < 1500\n      });\n      \n      this.recordMetrics(searchResponse, 'search_patients');\n      \n      // Get patient details with related data\n      const randomPatient = randomItem(CONFIG.testData.patients);\n      const patientDetailsResponse = http.get(\n        `${CONFIG.baseUrl}/api/patients/${randomPatient.mrn}?include=appointments,bills,lab_orders,allergies`,\n        {\n          headers: this.headers,\n          tags: { name: 'get_patient_details' ,},\n          timeout: '4s'\n        ,\n      \n      check(patientDetailsResponse, {\n        'patient details retrieved successfully': (r) => r.status === 200 || r.status === 404,\n        'patient details response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.patientOperationMaxTime\n      });\n      \n      this.recordMetrics(patientDetailsResponse, 'get_patient_details');\n      \n      // Create new patient (simulation)\n      const newPatientData = {\n        mrn: `MRN-TEST-${randomString(6, '0123456789')}`,\n        firstName: randomItem(['Alex', 'Morgan', 'Taylor', 'Jordan', 'Casey']),\n        lastName: randomItem(['Anderson', 'Martinez', 'Thompson', 'Garcia', 'Rodriguez']),\n        dateOfBirth: this.generateRandomDate(),\n        phone: `555-${randomIntBetween(100, 999)}-${randomIntBetween(1000, 9999)}`,\n        email: `test.${randomString(8),}@example.com`,\n        emergencyContact: {\n          name: 'Emergency Contact',\n          phone: `555-${randomIntBetween(100, 999)}-${randomIntBetween(1000, 9999)}`,\n          relationship: 'Family'\n        }\n      ,\n      \n      const createPatientResponse = http.post(\n        `${CONFIG.baseUrl}/api/patients`,\n        JSON.stringify(newPatientData),\n        {\n          headers: this.headers,\n          tags: { name: 'create_patient' ,},\n          timeout: '5s'\n        ,\n      \n      check(createPatientResponse, {\n        'patient creation response received': (r) => r.status >= 200 && r.status < 500,\n        'patient creation time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.patientOperationMaxTime\n      });\n      \n      this.recordMetrics(createPatientResponse, 'create_patient');\n      \n      const totalPatientOperationTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      patientOperationLatency.add(totalPatientOperationTime);\n      \n      // Update HIPAA compliance score\n      const hipaaScore = patientsResponse.status === 200 && \n                        searchResponse.status === 200 && \n                        patientDetailsResponse.status <= 404 ? 98 : 85;\n      hipaaComplianceScore.add(hipaaScore);\n    });\n  }\n\n  // Billing and revenue cycle tests\n  testBillingEndpoints(): void {\n    group('Billing & Revenue Cycle', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // Get bills with filters\n      const billsResponse = http.get(\n        `${CONFIG.baseUrl}/api/bills?status=pending&limit=30&include=items,payments`,\n        {\n          headers: this.headers,\n          tags: { name: 'get_bills' ,},\n          timeout: '6s'\n        ,\n      \n      check(billsResponse, {\n        'get bills successful': (r) => r.status === 200,\n        'get bills response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.billingMaxTime,\n        'bills data structure valid': (r) => {\n          try {\n            const response = r.json() as APIResponse<{ bills: unknown[] ,\n            return response?.success && Array.isArray(response.data?.bills);\n          } catch (error) { console.error(error); }\n        }\n      });\n      \n      this.recordMetrics(billsResponse, 'get_bills');\n      \n      // Outstanding bills summary\n      const outstandingResponse = http.get(\n        `${CONFIG.baseUrl}/api/bills/outstanding-summary?department=all`,\n        {\n          headers: this.headers,\n          tags: { name: 'outstanding_summary' ,},\n          timeout: '4s'\n        ,\n      \n      check(outstandingResponse, {\n        'outstanding summary successful': (r) => r.status === 200,\n        'outstanding summary time acceptable': (r) => r.timings.duration < 2000\n      });\n      \n      this.recordMetrics(outstandingResponse, 'outstanding_summary');\n      \n      // Create new bill\n      const randomPatient = randomItem(CONFIG.testData.patients);\n      const randomService = randomItem(CONFIG.testData.serviceItems);\n      \n      const billData = {\n        patientMrn: randomPatient.mrn,\n        visitType: randomItem(['OPD', 'IPD', 'Emergency']),\n        billType: 'Regular',\n        department: randomItem(CONFIG.testData.departments),\n        items: [\n          {\n            serviceItemId: randomService.id,\n            description: randomService.name,\n            quantity: randomIntBetween(1, 3),\n            unitPrice: randomService.price,\n            discount: 0\n          ,}\n        ],\n        notes: 'Performance test bill'\n      ,\n      \n      const createBillResponse = http.post(\n        `${CONFIG.baseUrl}/api/bills`,\n        JSON.stringify(billData),\n        {\n          headers: this.headers,\n          tags: { name: 'create_bill' ,},\n          timeout: '5s'\n        ,\n      \n      check(createBillResponse, {\n        'bill creation response received': (r) => r.status >= 200 && r.status < 500,\n        'bill creation time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.billingMaxTime\n      });\n      \n      this.recordMetrics(createBillResponse, 'create_bill');\n      \n      // Revenue analytics\n      const revenueResponse = http.get(\n        `${CONFIG.baseUrl}/api/billing/analytics/revenue?period=monthly`,\n        {\n          headers: this.headers,\n          tags: { name: 'revenue_analytics' ,},\n          timeout: '6s'\n        ,\n      \n      check(revenueResponse, {\n        'revenue analytics successful': (r) => r.status === 200,\n        'revenue analytics time acceptable': (r) => r.timings.duration < 4000\n      });\n      \n      this.recordMetrics(revenueResponse, 'revenue_analytics');\n      \n      const totalBillingTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      billingProcessingTime.add(totalBillingTime);\n    });\n  }\n\n  // Appointment scheduling system tests\n  testAppointmentEndpoints(): void {\n    group('Appointment Scheduling System', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // Get appointments with filters\n      const today = new Date().toISOString().split('T')[0];\n      const appointmentsResponse = http.get(\n        `${CONFIG.baseUrl}/api/appointments?date=${today}&status=scheduled&limit=25`,\n        {\n          headers: this.headers,\n          tags: { name: 'get_appointments' ,},\n          timeout: '4s'\n        ,\n      \n      check(appointmentsResponse, {\n        'get appointments successful': (r) => r.status === 200,\n        'get appointments response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.appointmentMaxTime\n      });\n      \n      this.recordMetrics(appointmentsResponse, 'get_appointments');\n      \n      // Doctor's schedule\n      const randomDoctor = randomItem(CONFIG.testData.doctors);\n      const scheduleResponse = http.get(\n        `${CONFIG.baseUrl}/api/appointments/doctor/${randomDoctor.id}/schedule?date=${today}`,\n        {\n          headers: this.headers,\n          tags: { name: 'doctor_schedule' ,},\n          timeout: '3s'\n        ,\n      \n      check(scheduleResponse, {\n        'doctor schedule retrieved successfully': (r) => r.status === 200 || r.status === 404,\n        'doctor schedule time acceptable': (r) => r.timings.duration < 1500\n      });\n      \n      this.recordMetrics(scheduleResponse, 'doctor_schedule');\n      \n      // Available time slots\n      const slotsResponse = http.get(\n        `${CONFIG.baseUrl}/api/appointments/available-slots?doctorId=${randomDoctor.id}&date=${today}&duration=30`,\n        {\n          headers: this.headers,\n          tags: { name: 'available_slots' ,},\n          timeout: '3s'\n        ,\n      \n      check(slotsResponse, {\n        'available slots retrieved successfully': (r) => r.status === 200,\n        'available slots time acceptable': (r) => r.timings.duration < 1200\n      });\n      \n      this.recordMetrics(slotsResponse, 'available_slots');\n      \n      // Create appointment\n      const randomPatient = randomItem(CONFIG.testData.patients);\n      const futureDate = new Date(crypto.getRandomValues(new Uint32Array(1))[0] + randomIntBetween(1, 14) * 24 * 60 * 60 * 1000);\n      \n      const appointmentData = {\n        patientMrn: randomPatient.mrn,\n        doctorId: randomDoctor.id,\n        appointmentDate: futureDate.toISOString().split('T')[0],\n        appointmentTime: `${randomIntBetween(9, 16)}:${randomItem(['00', '30'])}`,\n        duration: 30,\n        type: randomItem(['Consultation', 'Follow-up', 'Procedure']),\n        department: randomDoctor.specialty,\n        priority: randomItem(['routine', 'urgent']),\n        notes: 'Performance test appointment'\n      ,\n      \n      const createAppointmentResponse = http.post(\n        `${CONFIG.baseUrl}/api/appointments`,\n        JSON.stringify(appointmentData),\n        {\n          headers: this.headers,\n          tags: { name: 'create_appointment' ,},\n          timeout: '4s'\n        ,\n      \n      check(createAppointmentResponse, {\n        'appointment creation response received': (r) => r.status >= 200 && r.status < 500,\n        'appointment creation time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.appointmentMaxTime\n      });\n      \n      this.recordMetrics(createAppointmentResponse, 'create_appointment');\n      \n      const totalAppointmentTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      appointmentBookingTime.add(totalAppointmentTime);\n    });\n  }\n\n  // Laboratory management tests\n  testLabEndpoints(): void {\n    group('Laboratory Management System', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // Get lab orders\n      const labOrdersResponse = http.get(\n        `${CONFIG.baseUrl}/api/lab/orders?status=pending&limit=25&include=tests,results`,\n        {\n          headers: this.headers,\n          tags: { name: 'get_lab_orders' ,},\n          timeout: '5s'\n        ,\n      \n      check(labOrdersResponse, {\n        'get lab orders successful': (r) => r.status === 200,\n        'get lab orders response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.labOrderMaxTime\n      });\n      \n      this.recordMetrics(labOrdersResponse, 'get_lab_orders');\n      \n      // Critical lab results\n      const criticalResultsResponse = http.get(\n        `${CONFIG.baseUrl}/api/lab/critical-results?hours=24`,\n        {\n          headers: this.headers,\n          tags: { name: 'critical_results' ,},\n          timeout: '3s'\n        ,\n      \n      check(criticalResultsResponse, {\n        'critical results retrieved successfully': (r) => r.status === 200,\n        'critical results time acceptable': (r) => r.timings.duration < 1000\n      });\n      \n      this.recordMetrics(criticalResultsResponse, 'critical_results');\n      \n      // Lab workload statistics\n      const workloadResponse = http.get(\n        `${CONFIG.baseUrl}/api/lab/statistics/workload?period=daily`,\n        {\n          headers: this.headers,\n          tags: { name: 'lab_workload' ,},\n          timeout: '4s'\n        ,\n      \n      check(workloadResponse, {\n        'lab workload statistics successful': (r) => r.status === 200,\n        'lab workload time acceptable': (r) => r.timings.duration < 2500\n      });\n      \n      this.recordMetrics(workloadResponse, 'lab_workload');\n      \n      // Create lab order\n      const randomPatient = randomItem(CONFIG.testData.patients);\n      const labOrderData = {\n        patientMrn: randomPatient.mrn,\n        orderingPhysician: randomItem(CONFIG.testData.doctors).id,\n        tests: [\n          {\n            testCode: randomItem(['CBC', 'BMP', 'LIPID', 'TSH', 'HBA1C']),\n            priority: randomItem(['routine', 'urgent', 'stat']),\n            notes: 'Performance test order'\n          ,}\n        ],\n        clinicalInfo: 'Routine follow-up',\n        expectedDate: new Date(crypto.getRandomValues(new Uint32Array(1))[0] + 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n      ,\n      \n      const createLabOrderResponse = http.post(\n        `${CONFIG.baseUrl}/api/lab/orders`,\n        JSON.stringify(labOrderData),\n        {\n          headers: this.headers,\n          tags: { name: 'create_lab_order' ,},\n          timeout: '4s'\n        ,\n      \n      check(createLabOrderResponse, {\n        'lab order creation response received': (r) => r.status >= 200 && r.status < 500,\n        'lab order creation time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.labOrderMaxTime\n      });\n      \n      this.recordMetrics(createLabOrderResponse, 'create_lab_order');\n      \n      const totalLabTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      labOrderProcessingTime.add(totalLabTime);\n    });\n  }\n\n  // Inpatient department tests\n  testIPDEndpoints(): void {\n    group('Inpatient Department (IPD)', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // Get current admissions\n      const admissionsResponse = http.get(\n        `${CONFIG.baseUrl}/api/ipd/admissions?status=active&include=vitals,medications&limit=20`,\n        {\n          headers: this.headers,\n          tags: { name: 'get_admissions' ,},\n          timeout: '5s'\n        ,\n      \n      check(admissionsResponse, {\n        'get admissions successful': (r) => r.status === 200,\n        'get admissions response time acceptable': (r) => r.timings.duration < CONFIG.performanceThresholds.ipdOperationMaxTime\n      });\n      \n      this.recordMetrics(admissionsResponse, 'get_admissions');\n      \n      // Ward occupancy status\n      const wardOccupancyResponse = http.get(\n        `${CONFIG.baseUrl}/api/ipd/ward-occupancy?real_time=true`,\n        {\n          headers: this.headers,\n          tags: { name: 'ward_occupancy' ,},\n          timeout: '3s'\n        ,\n      \n      check(wardOccupancyResponse, {\n        'ward occupancy retrieved successfully': (r) => r.status === 200,\n        'ward occupancy time acceptable': (r) => r.timings.duration < 1500\n      });\n      \n      this.recordMetrics(wardOccupancyResponse, 'ward_occupancy');\n      \n      // Bed availability\n      const bedAvailabilityResponse = http.get(\n        `${CONFIG.baseUrl}/api/ipd/beds/availability?ward=all&bed_type=general`,\n        {\n          headers: this.headers,\n          tags: { name: 'bed_availability' ,},\n          timeout: '3s'\n        ,\n      \n      check(bedAvailabilityResponse, {\n        'bed availability retrieved successfully': (r) => r.status === 200,\n        'bed availability time acceptable': (r) => r.timings.duration < 1200\n      });\n      \n      this.recordMetrics(bedAvailabilityResponse, 'bed_availability');\n      \n      // Nursing station dashboard\n      const nurseDashboardResponse = http.get(\n        `${CONFIG.baseUrl}/api/ipd/nursing-dashboard?ward=ICU`,\n        {\n          headers: this.headers,\n          tags: { name: 'nurse_dashboard' ,},\n          timeout: '4s'\n        ,\n      \n      check(nurseDashboardResponse, {\n        'nurse dashboard loaded successfully': (r) => r.status === 200,\n        'nurse dashboard time acceptable': (r) => r.timings.duration < 2500\n      });\n      \n      this.recordMetrics(nurseDashboardResponse, 'nurse_dashboard');\n      \n      const totalIPDTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      ipdOperationTime.add(totalIPDTime);\n    });\n  }\n\n  // Emergency department tests\n  testEmergencyEndpoints(): void {\n    group('Emergency Department', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // ED dashboard\n      const edDashboardResponse = http.get(\n        `${CONFIG.baseUrl}/api/emergency/dashboard?real_time=true`,\n        {\n          headers: this.headers,\n          tags: { name: 'ed_dashboard' ,},\n          timeout: '2s'\n        ,\n      \n      check(edDashboardResponse, {\n        'ED dashboard loaded successfully': (r) => r.status === 200,\n        'ED dashboard response time critical': (r) => r.timings.duration < CONFIG.performanceThresholds.emergencyMaxTime\n      });\n      \n      this.recordMetrics(edDashboardResponse, 'ed_dashboard');\n      \n      // Triage queue\n      const triageQueueResponse = http.get(\n        `${CONFIG.baseUrl}/api/emergency/triage-queue?priority=all`,\n        {\n          headers: this.headers,\n          tags: { name: 'triage_queue' ,},\n          timeout: '2s'\n        ,\n      \n      check(triageQueueResponse, {\n        'triage queue retrieved successfully': (r) => r.status === 200,\n        'triage queue response time critical': (r) => r.timings.duration < CONFIG.performanceThresholds.emergencyMaxTime\n      });\n      \n      this.recordMetrics(triageQueueResponse, 'triage_queue');\n      \n      // Bed assignment\n      const bedAssignmentResponse = http.get(\n        `${CONFIG.baseUrl}/api/emergency/bed-assignment?status=available`,\n        {\n          headers: this.headers,\n          tags: { name: 'ed_bed_assignment' ,},\n          timeout: '2s'\n        ,\n      \n      check(bedAssignmentResponse, {\n        'ED bed assignment retrieved successfully': (r) => r.status === 200,\n        'ED bed assignment time critical': (r) => r.timings.duration < CONFIG.performanceThresholds.emergencyMaxTime\n      });\n      \n      this.recordMetrics(bedAssignmentResponse, 'ed_bed_assignment');\n      \n      const totalEmergencyTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      emergencyResponseTime.add(totalEmergencyTime);\n    });\n  }\n\n  // Clinical documentation tests\n  testClinicalEndpoints(): void {\n    group('Clinical Documentation System', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // Clinical notes\n      const notesResponse = http.get(\n        `${CONFIG.baseUrl}/api/clinical/notes?patient_id=all&limit=15&include=attachments`,\n        {\n          headers: this.headers,\n          tags: { name: 'clinical_notes' ,},\n          timeout: '4s'\n        ,\n      \n      check(notesResponse, {\n        'clinical notes retrieved successfully': (r) => r.status === 200,\n        'clinical notes response time acceptable': (r) => r.timings.duration < 2000\n      });\n      \n      this.recordMetrics(notesResponse, 'clinical_notes');\n      \n      // Patient summaries\n      const randomPatient = randomItem(CONFIG.testData.patients);\n      const summaryResponse = http.get(\n        `${CONFIG.baseUrl}/api/clinical/patient-summary/${randomPatient.mrn}?include_history=true`,\n        {\n          headers: this.headers,\n          tags: { name: 'patient_summary' ,},\n          timeout: '3s'\n        ,\n      \n      check(summaryResponse, {\n        'patient summary retrieved successfully': (r) => r.status === 200 || r.status === 404,\n        'patient summary time acceptable': (r) => r.timings.duration < 1800\n      });\n      \n      this.recordMetrics(summaryResponse, 'patient_summary');\n      \n      const totalClinicalTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      clinicalDataAccessTime.add(totalClinicalTime);\n    });\n  }\n\n  // Reporting and analytics tests\n  testReportingEndpoints(): void {\n    group('Reporting & Analytics', () => {\n      const startTime = crypto.getRandomValues(new Uint32Array(1))[0];\n      \n      // Hospital statistics\n      const statsResponse = http.get(\n        `${CONFIG.baseUrl}/api/reports/hospital-statistics?period=daily`,\n        {\n          headers: this.headers,\n          tags: { name: 'hospital_stats' ,},\n          timeout: '8s'\n        ,\n      \n      check(statsResponse, {\n        'hospital statistics retrieved successfully': (r) => r.status === 200,\n        'hospital statistics time acceptable': (r) => r.timings.duration < 6000\n      });\n      \n      this.recordMetrics(statsResponse, 'hospital_stats');\n      \n      // Quality metrics\n      const qualityResponse = http.get(\n        `${CONFIG.baseUrl}/api/reports/quality-metrics?type=patient_satisfaction`,\n        {\n          headers: this.headers,\n          tags: { name: 'quality_metrics' ,},\n          timeout: '5s'\n        ,\n      \n      check(qualityResponse, {\n        'quality metrics retrieved successfully': (r) => r.status === 200,\n        'quality metrics time acceptable': (r) => r.timings.duration < 4000\n      });\n      \n      this.recordMetrics(qualityResponse, 'quality_metrics');\n      \n      const totalReportTime = crypto.getRandomValues(new Uint32Array(1))[0] - startTime;\n      reportGenerationTime.add(totalReportTime);\n    });\n  }\n\n  // Utility methods\n  private recordMetrics(response: RefinedResponse<ResponseType | undefined>, operation: string): void {\n    apiCallsCounter.add(1,\n    responseTimeTrend.add(response.timings.duration, { operation });\n    \n    const isError = response.status >= 400;\n    errorRate.add(isError, { operation });\n    \n    // Update audit trail completeness\n    try {\n      const responseData = response.json() as APIResponse<any>;\n      auditTrailCompleteness.add(responseData.requestId ? 1 : 0);\n    } catch (error) { console.error(error); }\n    \n    // Update data privacy score based on response headers\n    const hasSecurityHeaders = response.headers['x-content-type-options'] || \n                              response.headers['x-frame-options'] ||\n                              response.headers['strict-transport-security'];\n    dataPrivacyScore.add(hasSecurityHeaders ? 95 : 85);\n    \n    if (isError != null) {\n      console.warn(`API Error in ${operation}: Status ${response.status}, Response: ${response.body?.substring(0,\n    }\n  }\n\n  private generateRandomDate(): string {\n    const start = new Date(1960, 0, 1);\n    const end = new Date(2005, 11, 31);\n    const date = new Date(start.getTime() + crypto.getRandomValues(new Uint32Array(1))[0] / (0xFFFFFFFF + 1) * (end.getTime() - start.getTime()));\n    return date.toISOString().split('T')[0];\n  }\n}\n\n// Setup function\nexport function setup(): { authToken: string ,\n  console.log(`Environment: ${CONFIG.testEnvironment,\n  console.log(`Base URL: ${CONFIG.baseUrl,\n  console.log(`Test Data: ${CONFIG.testData.patients.length,} patients, ${CONFIG.testData.doctors.length} doctors`);\n  \n  // Verify API connectivity\n  const healthCheck = http.get(`${CONFIG.baseUrl}/api/health`, { timeout: '10s' ,\n  if (healthCheck.status !== 200) {\n    fail(`API health check failed: ${healthCheck.status,\n  }\n  \n  console.log('✅ API connectivity verified');\n  \n  // Authenticate\n  const authToken = EnterpriseAuthService.authenticate();\n  if (!authToken) {\n    fail('Failed to obtain authentication token');\n  }\n  \n  console.log('✅ Authentication successful');\n  console.log('🚀 Starting comprehensive load testing...');\n  \n  return { authToken };\n}\n\n// Main test function\nexport default function(data: { authToken: string ,\n    return;\n  }\n  \n  const loadTester = new EnterpriseLoadTester(data.authToken);\n  \n  // Determine test focus based on scenario\n  const scenario = __ENV.K6_SCENARIO_NAME || 'business_hours';\n  const vuId = __VU;\n  \n  try {\n    // Always test system health\n    loadTester.testHealthEndpoints();\n    \n    // Distribute load based on scenario and VU\n    switch (scenario) {\n      case 'emergency_department':\n        loadTester.testEmergencyEndpoints();\n        loadTester.testPatientEndpoints();\n        break;\n        \n      case 'batch_processing':\n        loadTester.testBillingEndpoints();\n        loadTester.testReportingEndpoints();\n        break;\n        \n      case 'critical_operations':\n        loadTester.testEmergencyEndpoints();\n        loadTester.testClinicalEndpoints();\n        loadTester.testPatientEndpoints();\n        break;\n        \n      default:\n        // Business hours - distribute load across all modules\n        const testPattern = vuId % 8;\n        \n        switch (testPattern) {\n          case 0:\n          case 1:\n            loadTester.testPatientEndpoints();\n            loadTester.testAppointmentEndpoints();\n            break;\n          case 2:\n            loadTester.testBillingEndpoints();\n            break;\n          case 3:\n            loadTester.testLabEndpoints();\n            break;\n          case 4:\n            loadTester.testIPDEndpoints();\n            break;\n          case 5:\n            loadTester.testClinicalEndpoints();\n            break;\n          case 6:\n            loadTester.testEmergencyEndpoints();\n            break;\n          case 7:\n            loadTester.testReportingEndpoints();\n            break;\n        }\n        break;\n    }\n    \n  } catch (error) { console.error(error); } (${scenario}):`, error);\n    errorRate.add(1);\n  }\n  \n  // Realistic user behavior\n  const thinkTime = scenario === 'emergency_department' ? \n    randomIntBetween(0.5, 2) : \n    randomIntBetween(1, 4);\n  \n  sleep(thinkTime);\n}\n\n// Teardown function\nexport function teardown(data: { authToken: string ,\n  \n  // Invalidate authentication token\n  EnterpriseAuthService.invalidateToken();\n  \n  // Log final comprehensive metrics\n  console.log('📊 Final Load Test Metrics Summary:');\n  console.log(`Total API calls: ${apiCallsCounter.value,\n  console.log(`Overall error rate: ${(errorRate.value * 100).toFixed(3),\n  console.log(`Average response time: ${responseTimeTrend.avg?.toFixed(2),\n  console.log(`System health score: ${systemHealthScore.value?.toFixed(1),\n  console.log(`HIPAA compliance score: ${hipaaComplianceScore.value?.toFixed(1),\n  console.log(`Data privacy score: ${dataPrivacyScore.value?.toFixed(1),\n  console.log(`Audit trail completeness: ${(auditTrailCompleteness.value * 100).toFixed(1),\n  console.log(`Cache hit rate: ${(cacheHitRate.value * 100).toFixed(1),\n  \n  console.log('✅ HMS Load Test Suite completed successfully');\n}\n\n// Enhanced summary with comprehensive reporting\nexport function handleSummary(data: unknown): unknown {\n  const summary = {\n    timestamp: new Date().toISOString(),\n    test_type: 'comprehensive_load_test',\n    test_environment: CONFIG.testEnvironment,\n    duration_ms: data.state?.testRunDurationMs || 0,\n    total_iterations: data.metrics?.iterations?.values?.count || 0,\n    max_concurrent_users: data.metrics?.vus_max?.values?.max || 0,\n    \n    // Overall performance metrics\n    http_req_duration_avg: data.metrics?.http_req_duration?.values?.avg || 0,\n    http_req_duration_p95: data.metrics?.http_req_duration?.values?.['p(95)'] || 0,\n    http_req_duration_p99: data.metrics?.http_req_duration?.values?.['p(99)'] || 0,\n    http_req_failed_rate: data.metrics?.http_req_failed?.values?.rate || 0,\n    http_reqs_per_second: data.metrics?.http_reqs?.values?.rate || 0,\n    total_api_calls: data.metrics?.api_calls?.values?.count || 0,\n    \n    // Healthcare-specific metrics\n    patient_operation_latency_avg: data.metrics?.patient_operation_latency?.values?.avg || 0,\n    billing_processing_time_avg: data.metrics?.billing_processing_time?.values?.avg || 0,\n    appointment_booking_time_avg: data.metrics?.appointment_booking_time?.values?.avg || 0,\n    lab_order_processing_time_avg: data.metrics?.lab_order_processing_time?.values?.avg || 0,\n    ipd_operation_time_avg: data.metrics?.ipd_operation_time?.values?.avg || 0,\n    emergency_response_time_avg: data.metrics?.emergency_response_time?.values?.avg || 0,\n    clinical_data_access_time_avg: data.metrics?.clinical_data_access_time?.values?.avg || 0,\n    report_generation_time_avg: data.metrics?.report_generation_time?.values?.avg || 0,\n    \n    // System health metrics\n    authentication_latency_avg: data.metrics?.authentication_latency?.values?.avg || 0,\n    database_response_time_avg: data.metrics?.database_response_time?.values?.avg || 0,\n    system_health_score: data.metrics?.system_health_score?.values?.avg || 0,\n    hipaa_compliance_score: data.metrics?.hipaa_compliance_score?.values?.avg || 0,\n    data_privacy_score: data.metrics?.data_privacy_score?.values?.avg || 0,\n    audit_trail_completeness: data.metrics?.audit_trail_completeness?.values?.rate || 0,\n    cache_hit_rate: data.metrics?.cache_hit_rate?.values?.rate || 0,\n    \n    // Resource utilization\n    max_concurrent_connections: data.metrics?.concurrent_connections?.values?.max || 0,\n    avg_memory_utilization: data.metrics?.memory_utilization?.values?.avg || 0,\n    avg_cpu_utilization: data.metrics?.cpu_utilization?.values?.avg || 0,\n    \n    // Performance assessment\n    performance_grade: calculatePerformanceGrade(data),\n    system_stability_score: calculateStabilityScore(data),\n    recommendations: generateLoadTestRecommendations(data)\n  ,\n  \n  const textReport = generateTextReport(summary);\n  const htmlReport = generateHTMLReport(summary, data);\n  \n  return {\n    'hms-load-test-results.json': JSON.stringify(summary, null, 2),\n    'hms-load-test-report.html': htmlReport,\n    'hms-load-test-summary.txt': textReport,\n    stdout: textSummary(data, })\n  ,};\n}\n\n// Performance assessment functions\nfunction calculatePerformanceGrade(data: unknown): string {\n  const p95 = data.metrics?.http_req_duration?.values?.['p(95)'] || Infinity;\n  const errorRate = data.metrics?.http_req_failed?.values?.rate || 1;\n  const healthScore = data.metrics?.system_health_score?.values?.avg || 0;\n  const hipaaScore = data.metrics?.hipaa_compliance_score?.values?.avg || 0;\n  \n  if (p95 < 2000 && errorRate < 0?.002 && healthScore > 90 && hipaaScore > 95) {\n    return 'A+';\n  } else if (p95 < 2500 && errorRate < 0?.003 && healthScore > 85 && hipaaScore > 90) {\n    return 'A';\n  } else if (p95 < 3000 && errorRate < 0?.005 && healthScore > 80 && hipaaScore > 85) {\n    return 'B';\n  } else if (p95 < 4000 && errorRate < 0?.01 && healthScore > 70) {\n    return 'C';\n  } else if (p95 < 6000 && errorRate < 0.02) {\n    return 'D';\n  } else {\n    return 'F';\n  }\n}\n\nfunction calculateStabilityScore(data: unknown): number {\n  let score = 100;\n  \n  const errorRate = data.metrics?.http_req_failed?.values?.rate || 0;\n  const p99 = data.metrics?.http_req_duration?.values?.['p(99)'] || 0;\n  const healthScore = data.metrics?.system_health_score?.values?.avg || 100;\n  const memoryUtil = data.metrics?.memory_utilization?.values?.avg || 0;\n  \n  if (errorRate > 0.01) score -= 30;\n  else if (errorRate > 0.005) score -= 15;\n  else if (errorRate > 0.002) score -= 8;\n  \n  if (p99 > 5000) score -= 25;\n  else if (p99 > 3000) score -= 15;\n  else if (p99 > 2000) score -= 8;\n  \n  if (healthScore < 70) score -= 20;\n  else if (healthScore < 85) score -= 10;\n  \n  if (memoryUtil > 90) score -= 15;\n  else if (memoryUtil > 80) score -= 8;\n  \n  return Math.max(0, score);\n}\n\nfunction generateLoadTestRecommendations(data: unknown): string[] {\n  const recommendations: string[] = [];\n  \n  const p95 = data.metrics?.http_req_duration?.values?.['p(95)'] || 0;\n  const errorRate = data.metrics?.http_req_failed?.values?.rate || 0;\n  const healthScore = data.metrics?.system_health_score?.values?.avg || 100;\n  const cacheHitRate = data.metrics?.cache_hit_rate?.values?.rate || 1;\n  const memoryUtil = data.metrics?.memory_utilization?.values?.avg || 0;\n  const emergencyTime = data.metrics?.emergency_response_time?.values?.avg || 0;\n  \n  if (p95 > 2500) {\n    recommendations.push('Consider implementing database query optimization and adding CDN for static assets');\n  }\n  \n  if (errorRate > 0.005) {\n    recommendations.push('Review application logs and implement circuit breakers for external service calls');\n  }\n  \n  if (healthScore < 85) {\n    recommendations.push('Investigate system health issues and consider scaling infrastructure resources');\n  }\n  \n  if (cacheHitRate < 0.8) {\n    recommendations.push('Optimize caching strategy to improve cache hit rates and reduce database load');\n  }\n  \n  if (memoryUtil > 85) {\n    recommendations.push('Monitor memory usage patterns and consider increasing available memory or optimizing memory-intensive operations');\n  }\n  \n  if (emergencyTime > 1000) {\n    recommendations.push('Critical: Emergency department response times exceed acceptable limits. Immediate optimization required');\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push('System performance meets all healthcare standards. Continue monitoring and consider capacity planning for growth');\n  }\n  \n  return recommendations;\n}\n\nfunction generateTextReport(summary: unknown): string {\n  return `\nHospital Management System - Comprehensive Load Test Report\n===========================================================\n\nTest Information:\n- Environment: ${summary.test_environment}\n- Duration: ${(summary.duration_ms / 1000).toFixed(1)} seconds\n- Total Iterations: ${summary.total_iterations}\n- Max Concurrent Users: ${summary.max_concurrent_users}\n- Total API Calls: ${summary.total_api_calls}\n\nOverall Performance:\n- Average Response Time: ${summary.http_req_duration_avg.toFixed(2)}ms\n- 95th Percentile Response Time: ${summary.http_req_duration_p95.toFixed(2)}ms\n- 99th Percentile Response Time: ${summary.http_req_duration_p99.toFixed(2)}ms\n- Error Rate: ${(summary.http_req_failed_rate * 100).toFixed(3)}%\n- Requests per Second: ${summary.http_reqs_per_second.toFixed(2)}\n\nHealthcare Module Performance:\n- Patient Operations: ${summary.patient_operation_latency_avg.toFixed(2)}ms\n- Billing Processing: ${summary.billing_processing_time_avg.toFixed(2)}ms\n- Appointment Booking: ${summary.appointment_booking_time_avg.toFixed(2)}ms\n- Lab Order Processing: ${summary.lab_order_processing_time_avg.toFixed(2)}ms\n- IPD Operations: ${summary.ipd_operation_time_avg.toFixed(2)}ms\n- Emergency Response: ${summary.emergency_response_time_avg.toFixed(2)}ms\n- Clinical Data Access: ${summary.clinical_data_access_time_avg.toFixed(2)}ms\n- Report Generation: ${summary.report_generation_time_avg.toFixed(2)}ms\n\nSystem Health & Compliance:\n- System Health Score: ${summary.system_health_score.toFixed(1)}/100\n- HIPAA Compliance Score: ${summary.hipaa_compliance_score.toFixed(1)}/100\n- Data Privacy Score: ${summary.data_privacy_score.toFixed(1)}/100\n- Audit Trail Completeness: ${(summary.audit_trail_completeness * 100).toFixed(1)}%\n- Cache Hit Rate: ${(summary.cache_hit_rate * 100).toFixed(1)}%\n\nResource Utilization:\n- Average Memory Utilization: ${summary.avg_memory_utilization.toFixed(1)}%\n- Average CPU Utilization: ${summary.avg_cpu_utilization.toFixed(1)}%\n- Max Concurrent Connections: ${summary.max_concurrent_connections}\n\nAssessment:\n- Performance Grade: ${summary.performance_grade}\n- System Stability Score: ${summary.system_stability_score,}/100\n\nRecommendations:\n${summary.recommendations.map((rec: string, index: number) => `${index + 1}. ${rec}`).join('\\n')}\n\nGenerated: ${summary.timestamp,\n}\n\nfunction generateHTMLReport(summary: unknown, data: unknown): string {\n  const gradeColor = {\n    'A+': '#2ecc71', 'A': '#27ae60', 'B': '#3498db', 'C': '#f39c12', 'D': '#e67e22', 'F': '#e74c3c'\n  }[summary.performance_grade] || '#95a5a6';\n  \n  return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>HMS Load Test Report - ${summary.timestamp}</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif, margin: 0; padding: 20px, background: #f8f9fa ,}\n        .container { max-width: 1400px, background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1), overflow: hidden ,}\n        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%), color: white; padding: 30px; text-align: center , font-size: 32px; font-weight: 300 ,}\n        .header p { margin: 10px 0 0 0, font-size: 16px , grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)), gap: 20px; padding: 30px , border-radius: 10px, border-left: 5px solid #667eea, transition: transform 0.2s }\n        .metric-card:hover { transform: translateY(-2px) ,}\n        .metric-title { font-size: 14px, font-weight: 600; margin-bottom: 8px; text-transform: uppercase , font-weight: bold, margin-bottom: 4px ,}\n        .metric-unit { font-size: 14px, font-weight: normal }\n        .success { border-left-color: #27ae60 }\n        .warning { border-left-color: #f39c12 }\n        .danger { border-left-color: #e74c3c }\n        .info { border-left-color: #3498db , border-top: 2px solid #ecf0f1 , margin-bottom: 25px; font-size: 24px , align-items: center, margin: 20px 0 , font-weight: bold, text-align: center; border-radius: 50%, height: 100px; line-height: 100px, background: ${gradeColor, }\n        .stability-bar { width: 100%, background: #ecf0f1; border-radius: 10px, margin: 15px 0 ,}\n        .stability-fill { height: 100%, background: linear-gradient(90deg, #e74c3c 0%, #f39c12 30%, #27ae60 70%), width: ${summary.system_stability_score, transition: width 0.5s ease ,}\n        .recommendations { background: #ecf0f1, border-radius: 10px; margin-top: 25px , padding-left: 25px , line-height: 1.6 ,}\n        .chart-placeholder { background: #f8f9fa, padding: 40px; text-align: center; border-radius: 8px, margin: 20px 0 , border-collapse: collapse, margin: 20px 0 ,}\n        .thresholds-table th, .thresholds-table td { padding: 12px; text-align: left; border-bottom: 1px solid #dee2e6 , font-weight: 600 , font-weight: bold , font-weight: bold ,}\n        .footer { background: #2c3e50, padding: 20px; text-align: center }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🏥 Hospital Management System</h1>\n            <h2>Comprehensive Load Test Report</h2>\n            <p>Generated on ${new Date(summary.timestamp).toLocaleDateString()} at ${new Date(summary.timestamp).toLocaleTimeString()}</p>\n            <p>Environment: ${summary.test_environment.toUpperCase()} | Duration: ${(summary.duration_ms / 1000).toFixed(1)}s | Users: ${summary.max_concurrent_users}</p>\n        </div>\n        \n        <div class=\"metrics-grid\">\n            <div class=\"metric-card success\">\n                <div class=\"metric-title\">Total API Calls</div>\n                <div class=\"metric-value\">${summary.total_api_calls.toLocaleString()}</div>\n            </div>\n            \n            <div class=\"metric-card ${summary.http_req_failed_rate < 0.003 ? 'success' : summary.http_req_failed_rate < 0.01 ? 'warning' : 'danger'}\">\n                <div class=\"metric-title\">Success Rate</div>\n                <div class=\"metric-value\">${((1 - summary.http_req_failed_rate) * 100).toFixed(2)}<span class=\"metric-unit\">%</span></div>\n            </div>\n            \n            <div class=\"metric-card ${summary.http_req_duration_p95 < 2500 ? 'success' : summary.http_req_duration_p95 < 4000 ? 'warning' : 'danger'}\">\n                <div class=\"metric-title\">95th Percentile</div>\n                <div class=\"metric-value\">${summary.http_req_duration_p95.toFixed(0)}<span class=\"metric-unit\">ms</span></div>\n            </div>\n            \n            <div class=\"metric-card info\">\n                <div class=\"metric-title\">Requests per Second</div>\n                <div class=\"metric-value\">${summary.http_reqs_per_second.toFixed(1)}<span class=\"metric-unit\">req/s</span></div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>Performance Assessment</h2>\n            <div class=\"grade-container\">\n                <div class=\"grade\">${summary.performance_grade}</div>\n                <div>\n                    <h3>System Stability Score</h3>\n                    <div class=\"stability-bar\">\n                        <div class=\"stability-fill\"></div>\n                    </div>\n                    <p><strong>${summary.system_stability_score}/100</strong> - ${summary.system_stability_score >= 90 ? 'Excellent' : summary.system_stability_score >= 80 ? 'Good' : summary.system_stability_score >= 70 ? 'Fair' : 'Needs Improvement'}</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>Healthcare Module Performance</h2>\n            <div class=\"metrics-grid\">\n                <div class=\"metric-card ${summary.emergency_response_time_avg < 800 ? 'success' : summary.emergency_response_time_avg < 1200 ? 'warning' : 'danger'}\">\n                    <div class=\"metric-title\">Emergency Response</div>\n                    <div class=\"metric-value\">${summary.emergency_response_time_avg.toFixed(0)}<span class=\"metric-unit\">ms</span></div>\n                </div>\n                <div class=\"metric-card ${summary.patient_operation_latency_avg < 1500 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Patient Operations</div>\n                    <div class=\"metric-value\">${summary.patient_operation_latency_avg.toFixed(0)}<span class=\"metric-unit\">ms</span></div>\n                </div>\n                <div class=\"metric-card ${summary.billing_processing_time_avg < 3000 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Billing Processing</div>\n                    <div class=\"metric-value\">${summary.billing_processing_time_avg.toFixed(0)}<span class=\"metric-unit\">ms</span></div>\n                </div>\n                <div class=\"metric-card ${summary.appointment_booking_time_avg < 2000 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Appointment Booking</div>\n                    <div class=\"metric-value\">${summary.appointment_booking_time_avg.toFixed(0)}<span class=\"metric-unit\">ms</span></div>\n                </div>\n                <div class=\"metric-card ${summary.lab_order_processing_time_avg < 2500 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Lab Order Processing</div>\n                    <div class=\"metric-value\">${summary.lab_order_processing_time_avg.toFixed(0)}<span class=\"metric-unit\">ms</span></div>\n                </div>\n                <div class=\"metric-card ${summary.ipd_operation_time_avg < 2000 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">IPD Operations</div>\n                    <div class=\"metric-value\">${summary.ipd_operation_time_avg.toFixed(0)}<span class=\"metric-unit\">ms</span></div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>System Health & Compliance</h2>\n            <div class=\"metrics-grid\">\n                <div class=\"metric-card ${summary.system_health_score > 85 ? 'success' : summary.system_health_score > 70 ? 'warning' : 'danger'}\">\n                    <div class=\"metric-title\">System Health</div>\n                    <div class=\"metric-value\">${summary.system_health_score.toFixed(1)}<span class=\"metric-unit\">/100</span></div>\n                </div>\n                <div class=\"metric-card ${summary.hipaa_compliance_score > 95 ? 'success' : summary.hipaa_compliance_score > 90 ? 'warning' : 'danger'}\">\n                    <div class=\"metric-title\">HIPAA Compliance</div>\n                    <div class=\"metric-value\">${summary.hipaa_compliance_score.toFixed(1)}<span class=\"metric-unit\">/100</span></div>\n                </div>\n                <div class=\"metric-card ${summary.data_privacy_score > 90 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Data Privacy</div>\n                    <div class=\"metric-value\">${summary.data_privacy_score.toFixed(1)}<span class=\"metric-unit\">/100</span></div>\n                </div>\n                <div class=\"metric-card ${summary.audit_trail_completeness > 0.99 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Audit Completeness</div>\n                    <div class=\"metric-value\">${(summary.audit_trail_completeness * 100).toFixed(1)}<span class=\"metric-unit\">%</span></div>\n                </div>\n                <div class=\"metric-card ${summary.cache_hit_rate > 0.8 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Cache Hit Rate</div>\n                    <div class=\"metric-value\">${(summary.cache_hit_rate * 100).toFixed(1)}<span class=\"metric-unit\">%</span></div>\n                </div>\n                <div class=\"metric-card ${summary.avg_memory_utilization < 85 ? 'success' : 'warning'}\">\n                    <div class=\"metric-title\">Memory Usage</div>\n                    <div class=\"metric-value\">${summary.avg_memory_utilization.toFixed(1)}<span class=\"metric-unit\">%</span></div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>Performance Thresholds</h2>\n            <table class=\"thresholds-table\">\n                <thead>\n                    <tr>\n                        <th>Metric</th>\n                        <th>Actual Value</th>\n                        <th>Threshold</th>\n                        <th>Status</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>95th Percentile Response Time</td>\n                        <td>${summary.http_req_duration_p95.toFixed(0), 2500ms</td>\n                        <td class=\"${summary.http_req_duration_p95 < 2500 ? 'pass' : 'fail'}\">${summary.http_req_duration_p95 < 2500 ? '✅ PASS' : '❌ FAIL'}</td>\n                    </tr>\n                    <tr>\n                        <td>Error Rate</td>\n                        <td>${(summary.http_req_failed_rate * 100).toFixed(3)}%</td>\n                        <td>&lt; 0.3%</td>\n                        <td class=\"${summary.http_req_failed_rate < 0.003 ? 'pass' : 'fail'}\">${summary.http_req_failed_rate < 0.003 ? '✅ PASS' : '❌ FAIL'}</td>\n                    </tr>\n                    <tr>\n                        <td>Emergency Response Time</td>\n                        <td>${summary.emergency_response_time_avg.toFixed(0)}ms</td>\n                        <td>&lt; 800ms</td>\n                        <td class=\"${summary.emergency_response_time_avg < 800 ? 'pass' : 'fail'}\">${summary.emergency_response_time_avg < 800 ? '✅ PASS' : '❌ FAIL'}</td>\n                    </tr>\n                    <tr>\n                        <td>HIPAA Compliance Score</td>\n                        <td>${summary.hipaa_compliance_score.toFixed(1)}/100</td>\n                        <td>&gt; 95</td>\n                        <td class=\"${summary.hipaa_compliance_score > 95 ? 'pass' : 'fail'}\">${summary.hipaa_compliance_score > 95 ? '✅ PASS' : '❌ FAIL'}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        \n        <div class=\"section\">\n            <h2>Recommendations</h2>\n            <div class=\"recommendations\">\n                <h3>Performance Optimization Recommendations: </h3>\n                <ul>\n                    ${summary.recommendations.map((rec: string) => `<li>${rec}</li>`).join('')}\n                </ul>\n            </div>\n        </div>\n        \n        <div class=\"footer\">\n            <p>Hospital Management System Load Test Report | Generated: ${summary.timestamp,\n}\n\n// Export for external use\nexport { CONFIG, EnterpriseLoadTester, EnterpriseAuthService };\n";
